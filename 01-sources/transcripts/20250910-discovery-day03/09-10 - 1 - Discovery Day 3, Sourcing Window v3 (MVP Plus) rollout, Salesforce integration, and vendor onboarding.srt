1
00:00:01,090 --> 00:00:14,900
Nathan Bedford: I bet you we're gonna get the audio working here. Can you hear us? Hey, good. Oh, we can, okay. I'm gonna get my headphones on. We're figuring out our AV situation. You're coming through Steve's laptop.

2
00:00:15,260 --> 00:00:17,420
Andrew Bailey: I think I might be able to send it through.

3
00:00:18,780 --> 00:00:47,710
Nathan Bedford: Yeah, the HDMI could do that. We have the ability. Good. Microphone's coming through a webcam. It's the speakers that are a little dicey. That one, yeah, that one seems like the right one. Can you try again, Jeff? Yep. Not only do we got you, everybody in the whole room can hear you. That is the exact volume we want you at. I don't know if I would say that. I can hear the baby loud.

4
00:00:49,110 --> 00:00:51,750
Nathan Bedford: I'm just worried Josh is gonna come in here and tell me.

5
00:00:53,610 --> 00:00:57,380
Andrew Bailey: Give me a second, I'm looking at how to... Oh, there he goes.

6
00:01:00,081 --> 00:01:04,461
Nathan Bedford: Since the buns are on the other side there, we had to jerry-rig the inputs.

7
00:01:04,542 --> 00:01:08,002
Andrew Bailey: Can you do me a favor and sing the ABCs real quick so I can get this tuned in. 

8
00:01:08,842 --> 00:01:16,042
Jeff Olmstead: Oh, and if you want it on key, we're not going to go there, but, we'll give you some feedback. Alpha, beta, bravo.

9
00:01:16,762 --> 00:01:31,692
Nathan Bedford: No, that was doing it, Andy. It was just going down slowly. It's 73 now. Oh, I can just use this. Yeah, go for it. Alright, try again. Alpha, beta, bravo. Now we're getting there. That's acceptable. Alright, give me one more version.

10
00:01:33,622 --> 00:01:37,622
Jeff Olmstead: Zeta pi. I don't know how many more Greek letters I can get.

11
00:01:37,681 --> 00:01:45,102
Nathan Bedford: You're going to be limited. Honestly, this is what I was testing. I'm familiar with gamma and epsilon. That's about it.

12
00:01:46,142 --> 00:01:55,092
Andrew Bailey: Alright, I think we're within reason now. And I at least am confident. Steve should be here in a minute.

13
00:01:56,132 --> 00:02:27,154
Nathan Bedford: And then Jake will be here. Jake's the third principal. from our company should be here in a few minutes. So we're just chilling while that happens. Excellent. Jeff, I was looking at a little bit of your LinkedIn. I think we share a lot of similar philosophies around and I like just seeing your, opinions on, I can build software, but I don't start there. I start seeing if we can work with what we've got or existing solutions. I actually have that in my bio in LinkedIn. So I like that.

14
00:02:27,154 --> 00:02:29,434
Nathan Bedford: I have the same. Just because we can't build it doesn't.

15
00:02:29,434 --> 00:02:31,414
Andrew Bailey: mean we should. It's not timestamped though, so you don't know.

16
00:02:31,414 --> 00:02:44,704
Nathan Bedford: if he took it from you. I did copy and paste it from yours. Yeah, but it's in there now. Just because we can build it doesn't mean we should. Although I like to. Did you guys see that big NPM supply chain hit yesterday? Or two days ago was it yesterday. 

17
00:02:44,983 --> 00:02:47,024
Jeff Olmstead: Oh, no I didn't hear about that one yet.

18
00:02:47,144 --> 00:03:18,926
Nathan Bedford: I just happened to catch it with the fire ship. Basically, it's the biggest one in history right now. It was passed really quickly, but a core contributor of a bunch of, packages, including chalk, basically got... got phished and he he clicked on the link and then and somebody so they basically started pushing this kind of crypto what some kind of crypto exploit to you know billions of downloads a day kind of kind of packages wow got caught within two hours but man it's like one of those things where i know.

19
00:03:18,926 --> 00:03:39,006
Nathan Bedford: you guys use node as well this is the kind of thing that doesn't give note a good name when this happens but it's happened all of them you know people are laughing but see.net's got it java's got it log4j like there's a history of all these but that one was a big one that one because of this widespread nature of you know node it was out there yeah i'm gonna i'm gonna.

20
00:03:39,006 --> 00:03:45,256
Jeff Olmstead: look down now make sure uh the packages were hit yeah um it's amazing how fast they can spread.

21
00:03:45,256 --> 00:03:59,606
Nathan Bedford: once they hit and can yep that's this uh and this is i never thought about what it's like to be a core contributor on this many packages that's the risk there you got to be extra careful so, all right this jake jake's not here steve's back steve we were just shooting the tech breeze.

22
00:04:00,170 --> 00:04:16,279
Steve Muniak: Jeff, Carlos, good morning. Hey. Welcome to the party. It's good to be here. Hey, guys. Good morning, Jordan. Good morning, Dr. Stewart. Nice to knock you in. You guys want to do intros real quick. 

23
00:04:16,480 --> 00:04:47,230
Nathan Bedford: Sure. I can just kick it off. So, obviously, we're Avoda, Andy and I, and then the third guy coming in soon will be Jake. We're really excited to be on this project. We're really excited to partner with you guys to bring Sourcing Window Version 3 to life. I know you guys have got, you know, definitely between Carlos working at Block and Jeff, you know, obviously you've been at Block for a while, and FMD, like this is going to be a project that we won't be able to succeed unless we all work together. So, we're super excited to bring what we would consider modern, you know, technical best.

24
00:04:47,230 --> 00:04:51,350
Nathan Bedford: practices to myself and the guys in this room. Close to me. Hold on.

25
00:04:52,470 --> 00:04:54,830
Steve Muniak: I thought I was trying to close chat.

26
00:04:55,150 --> 00:04:58,270
Nathan Bedford: Yeah, but look at that. Is that a grandchild? You did close chat. The good news is you did close chat.

27
00:04:58,370 --> 00:05:01,732
Steve Muniak: Yeah, that's my daughter. That's Tom. and my granddaughter across the street.

28
00:05:01,792 --> 00:05:04,662
Andrew Bailey: Honestly, Jeff, you had to go. Look at this.

29
00:05:05,561 --> 00:05:06,542
Nathan Bedford: Come back, Jeff.

30
00:05:17,102 --> 00:05:19,681
Steve Muniak: There it is. You're back, Steve. That one's on me.

31
00:05:21,442 --> 00:05:22,181
Nathan Bedford: Not a bad player.

32
00:05:22,562 --> 00:05:29,102
Steve Muniak: I was trying to mute you. You were trying to mute the intro, weren't you? I was trying to mute the chat while we were talking.

33
00:05:29,262 --> 00:05:59,882
Nathan Bedford: I know I talk fast, but nobody says I talk too long. But now, that's my cue. No, but anyways, that's really, and just a little bit about me, I've been building tech for a little over 20 years between startups and enterprise. I actually spent a couple years overlapping, believe it or not, with your CIO at Spectrum Health. So it'd be interesting to see, we were both there for a couple years. And that was a good introduction to me to enterprise, which obviously will carry over to here. We have the need for compliance, but working like a startup.

34
00:06:00,063 --> 00:06:07,133
Nathan Bedford: is really the goal that we're going to try to do. So, yeah, we're excited, looking forward to talking more. Andy, you want to intro. 

35
00:06:08,573 --> 00:06:42,083
Andrew Bailey: Yeah, I'm Andy, and I'm sorry, I was cleaning things up. Just talking about what you're going to say and who we are. Yeah, yeah, we're the... Here we go, yeah. Whenever I talk about it, I usually say I stumbled into software. I have a math degree. I love math. I love solving problems. I love mapping ideas, complicated ideas, to simple patterns that allow teams to communicate.

36
00:06:42,544 --> 00:07:14,066
Andrew Bailey: I love building software that elegantly articulates a difficult domain space. So when I think about building software, I never think, oh, I want to build it in this tool or in this system or whatever. I'm almost always... just very interested in the process that creates a wonderful experience for developers and users to interact with a domain. And yeah, that's me.

37
00:07:14,715 --> 00:07:17,915
Nathan Bedford: Oh man, Jake, just in time. Here comes our third guy, Jake.

38
00:07:17,975 --> 00:07:21,555
Andrew Bailey: You know the guy who walks in late, casually, real chill? He must be good.

39
00:07:21,995 --> 00:07:25,615
Jake Herwaldt: I figured everybody would wait for me. He's got a costume. He's good to go.

40
00:07:29,165 --> 00:07:30,585
Nathan Bedford: We're doing intros though.

41
00:07:30,905 --> 00:07:32,506
Andrew Bailey: Sorry about you guys. No, no, no.

42
00:07:32,506 --> 00:07:33,725
Nathan Bedford: You want to tell about yourself? No, no.

43
00:07:33,725 --> 00:07:41,385
Andrew Bailey: He's traveling the longest to get here. He's doing priority number one, getting kids off to school and getting everything there.

44
00:07:42,905 --> 00:08:18,629
Jake Herwaldt: Yeah, I'm Jake. Nice to meet you guys. I am pretty much, from this project standpoint, I'll be doing more of the project management, side of things. But from a software standpoint, when I was in the enterprise, I... a lot of launching products within enterprise so that's pretty much my background or like UI UX user experience I'm obsessed with making software super easy to use and basically not need a manual to get on board itself that's a.

45
00:08:18,629 --> 00:08:53,510
Jeff Olmstead: little bit sure I'm Jeff Olmstead director of development with force medic design let me think probably been on board with force medic design four or five years now have a company for about 10 years so I enjoyed that process and I love to actually be part of it but also love to make some bigger products in to work on Salesforce at a greater level so do a lot of Salesforce about the work before that I work for this really tiny company called block imaging employee.

46
00:08:53,510 --> 00:09:24,071
Jeff Olmstead: number 20 I believe they've managed to scale well and so I have a long history, And as part of this project, part of it is bringing that history into connectivity. What is the current sourcing window, ecosystem, APIs, bridging the two is the technology stack. We're mainly focused on contributing, trying to watch out for any gotchas that we might have found on the other system, what notification patterns we have, some of that which has been shared with your team already.

47
00:09:25,291 --> 00:09:30,211
Jeff Olmstead: Trying to be that liaison, if you will, into the Salesforce system. Awesome.

48
00:09:31,742 --> 00:09:32,421
Nathan Bedford: Appreciate that.

49
00:09:32,561 --> 00:09:32,961
Jeff Olmstead: Carlos. 

50
00:09:36,571 --> 00:10:08,554
Karlous Malcolm: Mute. Good morning. Carlos with BlockEngine. I've been doing something in some ways to perform technology or IT for about 25 years or so. During that time, I spent a large hospital system and doing mostly IT administration, with . some of my software development for going fully into software development for a number of years. I focus on integration and not block image.

51
00:10:08,554 --> 00:10:33,644
Karlous Malcolm: and just mainly dealing with looking at the data, some reporting, and, possibly doing some development work, soon, creating integration. And my perspective on this is largely on the service side of things and integration, and things of that nature. Jordan, do you know Jeff and these guys. 

52
00:10:33,644 --> 00:10:45,473
Steve Muniak: I do. Yeah. Okay, you're good. And I'm the new Sam, so I'm running as PM for this and also the product manager and point of contact, if you can't get a hold of these guys or they can't get a hold of you.

53
00:10:47,554 --> 00:10:50,934
Nathan Bedford: Would you mind recording? Yeah. Thank you.

54
00:10:53,723 --> 00:10:59,324
Nathan Bedford: Yeah. I'm looking for the triple more, under the more I think you'll find it there.

55
00:11:00,186 --> 00:11:09,806
Jake Herwaldt: there we go perfect all right guys can you can you guys hear as well yeah it's pretty good.

56
00:11:10,886 --> 00:11:18,526
Steve Muniak: yeah once tyler gets in i'll see if i can get a better record so any more nasty comments.

57
00:11:18,526 --> 00:11:26,226
Jeff Olmstead: cannot be made we're now being recorded i just agreed to it all right guys it's yours all right.

58
00:11:26,226 --> 00:11:59,826
Nathan Bedford: um i yeah so we've got a couple hours like two and a half that that um i've got a little bit of an agenda that i'm trying to work through but it's primarily really about you um you guys have been plugged into the tech stack and the product way longer than you have and we would love to i recognize that you guys really at force medic in particular jeff we're helping fix things that you didn't make so um a lot of a lot of appreciation for what you guys are doing right with that now, um so i don't think you have all the answers but i'm hoping you can at least help ramp us up a little bit on some of the technical pieces that we'll be integrating with with salesforce and so.

59
00:12:00,000 --> 00:12:29,530
Nathan Bedford: My hope is to kind of go through a little bit of a quick understanding of the current architecture, especially the data model. I don't know. We've seen bits and pieces of the objects that are coming into play, but we know we'll have to be synchronizing with them. I'd love to talk a little bit about the future in a high-level architecture. Some of that is where ConvoPro, I'd love to hear more about ConvoPro and how that fits in. I've heard a few pitches for it, but I just don't really know. Sorry, making sure you guys can still hear us. We're switching microphones. Yep. Speakers. Perfect.

60
00:12:29,590 --> 00:12:30,010
Jeff Olmstead: That just sounds better.

61
00:12:30,150 --> 00:12:57,710
Nathan Bedford: Nice. Good job. Okay. So it's like current state, we'll talk future state specifically, and then the future state that I know you guys are going to play a big role in, and then just some practicals around getting access to sandboxes and what it might look like as we start working through the data synchronization process. I think that's going to be probably the biggest unknown for me, is what are our options with this existing product with synchronizing our data back and forth. Does that sound good. 

62
00:12:58,960 --> 00:12:59,700
Jeff Olmstead: Sounds like a plan.

63
00:13:00,032 --> 00:13:51,052
Nathan Bedford: Excellent. Okay. And I guess just starting off real quick on a recap for the last two days, I don't think this is going to be news to you guys, but just to make sure we're aligned, we had some great meetings with both the team that's going to be using this and also executives, like, you know, and Paul specifically, around the vision of how we're going to migrate over time from what we have now to V3 and then, you know, the various milestones beyond the V3 launch. And I think one of the things that really is about, like, one of the North Stars for us is building this in a way that's isolated, that could eventually be sold off as its own product. Not even that it's going to happen, but if we think about it that way, obviously, you can imagine that changes our architecture a little bit. And so a lot of this is detangling the pieces that are already kind of tightly woven in to be separate and all very API-driven to anything connected with Salesforce. That's the goal.

64
00:13:51,972 --> 00:14:23,784
Nathan Bedford: So it'll be still a tight connection, but it'll be the kind of connection that's connected through, you know, APIs that could be easily... Easily changed, if needed, in the future to... different you know a different third party so part of that is going to be, let's say you know for what we're calling the MVP plus launch that's and that's probably timeframe wise we're looking I think we're talking February at the latest but you know it's going to be it's going to be dependent on how fast things move in and holidays there you go and and so the idea behind that is.

65
00:14:23,784 --> 00:14:54,444
Nathan Bedford: really the target is the capabilities we currently have reproduced in the new system plus some extra pain points addressed so that when we're asking customers they come to this new internal and external customers hey let's move to this new platform we've got some good things to show them you know to incentivize them to do that that's the plus and so that so for that phase it's going to be in particular not an awful lot of like the flows are deeply integrated into Salesforce the admin flows from the block side we're not.

66
00:14:54,444 --> 00:15:24,536
Nathan Bedford: really targeting changing that a ton for that phase the goal is the external users will get a lot more data and we're not really targeting changing that a ton for that phase the goal is the external users will get this brain, new fantastic interface internal will really try to keep things kind of as is so that they don't have to deal with a lot of change right now and then if all goes well we'll start kind of migrating some pieces of those internal processes to the new stack that's and there's a lot of ways you can do that that's what I'm sure we'll talk about as time progresses between embedding things inside of Salesforce versus keeping you know we'll figure out what stays in.

67
00:15:24,536 --> 00:15:51,866
Nathan Bedford: versus what stays out but just wanted to get you that broad strokes kind of that's like the Paul Beard approved big picture that we're heading toward. we kind of looks like it to you with that I really tried to get him to sing.

68
00:15:51,866 --> 00:15:59,586
Andrew Bailey: his ABCs but he wouldn't you wouldn't do it I lost five bucks for that Jeff so thanks a lot okay when you're.

69
00:16:00,450 --> 00:16:35,420
Jeff Olmstead: When you're envisioning the implementation, if we had to break it down in simple words, there is a part someone wants, and there's 10 people that want to sell it. If it wasn't for a shopping cart mentality where we can do buying and selling from different people all in the same transaction, the process is not robust. It's literally as simple as that if you want to break it down to its core. It's when you get into shopping, external call-outs to get automated pricing, and all these other enhancements that make the user experience just that much better.

70
00:16:35,920 --> 00:16:59,740
Jeff Olmstead: That's where it starts to get a little bit more complicated. So when you're talking Jan 1, Feb 1, can you shadow the vision of the experience? Would every vendor, block included, have to come in and put in a price if they want to sell a part? Or are you envisioning, well, actually, no, at that point, APIs will be hooked up. It'll actually be consuming. Sales first data, they won't even have to come into the system.

71
00:17:00,542 --> 00:17:02,982
Nathan Bedford: Okay, good question. You want to talk about different flows. 

72
00:17:03,082 --> 00:17:32,932
Jake Herwaldt: Yeah, I would say Jan 1, the idea of this like MVP plus that we're calling it is just replacing what currently exists for external buyers and external vendors. So to answer your question simply, I guess we're calling MVP plus, right, Steve? So there will be some improvements, but the idea is not the automated pricing and things that you mentioned will not be there yet. That's what we're calling the phase 2, phase 3.

73
00:17:33,292 --> 00:17:34,052
Jake Herwaldt: Oh, go ahead.

74
00:17:34,792 --> 00:18:08,614
Steve Muniak: Jeff, what I foresee is probably through phase 1, we're going to, and Carlos, I'm having a meeting tomorrow finally with all parts to do this. We'll probably have inventory files being loaded as secondary inventory, and we'll shoot for an early, our late Q1, early Q2 API integration looking at multi, all parts. I don't know, parts. Partsource won't participate, but Partsource and all parts have established that API that's.

75
00:18:08,614 --> 00:18:10,854
Steve Muniak: plug and play at this point. Does that make sense. 

76
00:18:11,944 --> 00:18:22,254
Jeff Olmstead: Yes. With only one question. When you say import, will that be into the new tool platform? It will manage the inventory, or the block imaging sales force will manage it as third party stock. 

77
00:18:22,494 --> 00:18:30,304
Steve Muniak: We'll manage as third party stock initially with the intent to then move it over to being managed. Does that make sense, guys. 

78
00:18:30,524 --> 00:18:46,144
Nathan Bedford: Yeah, yeah. And that's uncovering, you're asking the question that we've asked Jeff too, which is which systems are going to own which data and when? Because we realize that's the challenge with integrating deeply with something like sales forces, determining, yeah, how the data flows through it, how it synchronizes. Yep.

79
00:18:47,474 --> 00:19:20,866
Jeff Olmstead: And then in this umbrella, in this MVP plus, you will now have block, they have their inventory, you persuaded a couple companies to also send over their inventory. which they're going to load up into third-party stock would block just quote on their behalf they would just take the best price from either their own inventory or from whatever they can have and they would be log into the tool someone on staff will maintain a login oh they'll check the alternate system no apis and they'll put in a price just like any other vendor would on fbp plus.

80
00:19:21,826 --> 00:19:27,366
Steve Muniak: the the intent is the sourcing activities will spell will remain within salesforce for phase.

81
00:19:27,366 --> 00:19:53,156
Jake Herwaldt: one or four block yeah yep and then the idea will be phase two phase three would be pulling out this is where we still need to find what the order is but that will be pulling functionality out for that internal block sourcing and pulling that into the new system along with the idea of auto pulling like inventory quantities and potentially pricing.

82
00:19:55,566 --> 00:20:27,320
Nathan Bedford: yes okay and i like the way the way that vicky described it yesterday was, It's fun to see her have an aha moment was like the experience we've been giving external like event We're planning and giving all the external folks We just want to bring that same great UX to the internal folks, too, And there's a lot of ways that can happen But like the hope is if the plus part we don't want to leave the internal folks without some of those plus things that we're adding That are you know smoothing down the workflows making the checkout process easier, You know using a add extract things out of the PO is like, you know All kinds of nice little things that we'll be adding you might as well make that more uniform across the board.

83
00:20:29,130 --> 00:20:35,870
Nathan Bedford: Now, let's see the plan for multi-vendor. Oh, I flipped away You want to ask the Carlos we can if you wanted to say that we can probably be better.

84
00:20:35,870 --> 00:20:51,830
Karlous Malcolm: So I was trying to get my thought out about was mentioned before about initially having third-party stock Salesforce is it the plan to do so for all vendors or multiple vendors with this part source just I'm sorry.

85
00:20:51,830 --> 00:21:01,091
Steve Muniak: It most likely just be all parts and then perhaps multi. Yeah, and like I said, I've got that all parts meeting tomorrow to, to get the executive approval.

86
00:21:02,401 --> 00:21:07,932
Karlous Malcolm: And sourcing them to three would then. bail force initially. 

87
00:21:09,361 --> 00:21:12,982
Nathan Bedford: Yeah, initially, yeah. I think that's the parts that, go ahead.

88
00:21:14,322 --> 00:21:38,822
Steve Muniak: That's a good question. We would not respond on All Parts' behalf, because of the discounting issues, okay? So if Flock doesn't have it and they wish to source from All Parts and All Parts is not a connected vendor, at that point we would look at that inventory file. If All Parts is a connected vendor, it's gonna be up to All Parts to then provide pricing for that customer.

89
00:21:39,081 --> 00:21:40,742
Jake Herwaldt: But we can give inventory quantities. 

90
00:21:41,782 --> 00:21:42,962
Steve Muniak: No, I wouldn't even do that.

91
00:21:42,982 --> 00:21:43,682
Jake Herwaldt: You wouldn't even do that. 

92
00:21:43,861 --> 00:21:46,662
Steve Muniak: No, it's, we don't give inventory quantities.

93
00:21:46,982 --> 00:21:47,621
Nathan Bedford: Okay, okay.

94
00:21:47,742 --> 00:21:53,722
Steve Muniak: We're just responding with pricing and availability. At least I'm just a little confused.

95
00:21:53,722 --> 00:22:04,123
Karlous Malcolm: about the value of loading the All Parts stuff, especially as it ties to social vendor. It just seems either agnostic or why load it to Salesforce. 

96
00:22:04,563 --> 00:22:35,293
Steve Muniak: Well, initially for the next quarter and a half, what it's gonna do is it's gonna reduce our partners processing time considerably. Cuz right now it takes about three to four minutes per line for, them to process a quote in sourcing window. This eliminates, and with a 5% close rate, so they're not happy campers for the past 20 months. I used to sit on the other side of the table and tell Block Burnett, this interim step reduces that labor considerably on the all part side. And as a preferred vendor,

97
00:22:35,933 --> 00:22:39,474
Steve Muniak: gives Block a better shot at higher quality product at the right price.

98
00:22:40,593 --> 00:22:44,613
Karlous Malcolm: I guess that also was lost about how it was connected to sourcing the three.

99
00:22:44,833 --> 00:22:49,494
Steve Muniak: It's not, not right now. Okay. Yeah, just put that out of scope for this conversation right now.

100
00:22:51,093 --> 00:23:04,165
Nathan Bedford: Yeah, because the long term future is that sourcing window is a standalone product, a lot of this stuff will move in to be owned by Sourcing Window Pro, right, that's the plan. But how do you think that's gonna work? we get there is what we're talking about over the next year or so. Can I say something. 

101
00:23:04,405 --> 00:23:34,995
Andrew Bailey: Sure. I think one of the things that we've recognized over the last two days, three days now, is that we're jumping into a domain, we're trying to map our language to it, and then you guys are coming from a highly technical space and asking questions, and you're using even some words that haven't been used by the rest of the team, even though all the technical concepts, I'm sure they align, we just kind of zipper them up. What we mapped out originally, was that there's, we started with five basic workflows that are being managed.

102
00:23:34,995 --> 00:24:05,339
Andrew Bailey: somewhere in the process of moving apart by either sourcing window or Salesforce, and that was that there was external vendors and buyers, internal vendors and buyers, there's a platform administration, process, and then field service engineers, we added later and said they have a pretty unique process and pretty unique constraints on their work in terms of what they're using, and so as we, Spent the last two days, we were really trying to define what is the beginning of this standalone product?

103
00:24:05,819 --> 00:24:38,099
Andrew Bailey: What are the ways that an external user, can be connected to it? If it's a product, that means that there's sort of levels. You have a basic user, you have a premium user that we've talked about, and then you have this integrated user. Those aren't great names, but they're sort of representative of what future definitions, future buckets where we put things. And so we've spent a lot of this time saying, okay, this is happening in Salesforce, this is happening in Sourcing Window, and these are product tools,

104
00:24:38,759 --> 00:25:12,971
Andrew Bailey: these are block-specific tools, and do all, do some block-specific tools stay with block because they're a way block likes to operate? Do some of these tools add value to a future premium or to a basic, right? All in the name of, can we get more part liquidity? Can we get better pricing? Can we get more value to these? Can we get more, transactions? happening that allow Block to service its clients better, right? There's a lot of things here we're just trying to gently decouple and then sort of rearrange. I say all that to say that the focus for MBB Plus.

105
00:25:12,971 --> 00:25:43,001
Andrew Bailey: is really the external vendor and buyer. And so what can we do to help all of Block's internal operations stay very consistent and really improve and demonstrate the capacity of this 3.0 launch with the external vendors and buyers? And then we feel like that whole process will align a lot of us on language more than these two days even have,

106
00:25:43,161 --> 00:26:11,963
Andrew Bailey: align us technically on how we're operating. It's a really safe sort of decoupling, and then we'll find the right spaces to do that, and then the journey continues. Does that make sense? I'm just even hearing some of your questions. It's like, oh, I think I know what you mean, but I'm recognizing, oh, okay, there might be some ways you're going to do that. I'm sure you're asking questions. We haven't necessarily aligned, and we're taking the two days we've spent thinking about this, and you're trying to give us the 5, 10, 20 years you've been thinking about this and sort through it. Go ahead. That was my monologue.

107
00:26:14,213 --> 00:26:34,093
Karlous Malcolm: The final solution or eventually the block will effectively be a vendor and buyer. It just sounds like you're saying, though, that we want initially for everyone but block to use this versus the traditional, what do you call it, eat-your-own-dog-food method. That it's correct, again, to have others use those first.

108
00:26:35,103 --> 00:26:36,823
Nathan Bedford: That's correct. That's what I'm understanding, too.

109
00:26:37,023 --> 00:27:09,515
Andrew Bailey: Yeah. Right now, we intend the future. The way that we've expressed that they're not perfect words is that vendor is what we would call this future integrated user, right? A premium plus, whatever you want to call it, where it's able to play both sides. Maybe block will be the only one ever to have that. Maybe in the future. there's another company that gets to operate with that same level but right now we're just pulling the external the things that serve external vendors and.

110
00:27:09,515 --> 00:27:38,035
Nathan Bedford: external buyers well I think what Carlos thinks normally you you whenever I've built tools for big companies we tested ourself we use it ourself yeah then released external and this time yeah that is correct that's not kind of in the opposite for three four reasons for sure a lot of it is like just not not making the internal teams get whipped through a brand new process again and we also think the external lift is pretty easy compared to some of the internal processes but yeah that's correct observation problems that is what's.

111
00:27:38,035 --> 00:27:59,885
Jake Herwaldt: happening but then fast-forwarding to the future if we get to like this ideal state essentially is you have what's now the external buyer external vendor, blocked becomes within that flow very similar but then they have like these magical pieces that are automated right that are special and unique to them but not broken out and they're not into a whole new flow like a current.

112
00:28:02,839 --> 00:28:21,829
Jeff Olmstead: One more, one more question on the MVP Plus. How much of the communication, you've been granted access to the notification flow diagram, if you will. How much of the communication will the new tool absorb, such that we also will be coordinating the turning off of notification systems. 

113
00:28:21,829 --> 00:28:52,869
Nathan Bedford: Yeah, that's a question we haven't talked about, but I assume, I would like to see it absorb all of it. And I think we would need to, it would just feel simpler to do that. And I think it enables some of the things that we would like in the MVP Plus, like the ability to take some action with one-click buttons from emails. That's a big thing for SAM. So, yes, I think all of it, unless you see a thing I'm missing about where that could be a challenge. But I'm hoping it's just a simple API call that you guys could make to call our system to do that. Do you see any risks there. 

114
00:28:54,569 --> 00:29:31,371
Jeff Olmstead: Yeah. The only risks to date are decoupling it from times when block imaging. Yeah. does ship and they're not using your tool okay that's that's the major risk so um it will turn more into i would suspect understanding scenarios so for for a season block imaging needs to complete these financial documents there is a requisition internally what they call it there is a purchase order internally even if it's bought and sold in your system yeah somehow we have to have an indicator this one's handled on whatever the new tool name is and therefore we don't need to manage.

115
00:29:31,371 --> 00:30:03,943
Jeff Olmstead: notifications because it will send it yep so there will have to be some collaboration yep i'm with you though i totally understand having this let's build a clean framework detached from block imaging because otherwise we're going to get sucked into what was so i'm actually glad you're pursuing it from that perspective myself we gotta i think there probably will be, the need to have a block imaging user functionally being the company um in other words, to be someone in there being like oh someone put in a part request and they're going to have to.

116
00:30:03,943 --> 00:30:13,223
Jeff Olmstead: enter the data i so even though you said they won't be on the system i haven't yet heard how they i feel like they'll have to be buying and selling on the system just like other people.

117
00:30:14,903 --> 00:30:31,263
Steve Muniak: the they would my my thought was that they would still interface 360 and acting as acting as a vendor within that tool does that make sense yeah you've just added though a ton of api calls that.

118
00:30:31,263 --> 00:30:38,543
Jeff Olmstead: that haven't been defined yep realizing that can so can you when you see also how i thought this.

119
00:30:38,543 --> 00:31:08,695
Karlous Malcolm: was going to be as well as i think earlier that block will eventually again i get that we're not going to eat on dog food type thing but that eventually block would be um both a um a vendor and a customer requests a buyer and a vendor eventually right is that within, internal our system as well as others also right because i also think about, from the hospital perspective. We also had our own inventory with our own ass amendment system as well. And we had, and it was all parts of the interface.

120
00:31:08,695 --> 00:31:31,955
Karlous Malcolm: with that eight dollars parts worth, but same exact concept there, right? Say you're in something, I need this widget. I guess I would envision the same thing would occur here. You see, oh, we have the three were requested. We have two on a shelf, one we don't have. And then directly then through eight guy calls, interfacing through this 3.0 saying, oh, hey, we need one of this widget.

121
00:31:35,285 --> 00:32:03,779
Nathan Bedford: Yeah, I think that integration is the, that's the piece that we're gonna have to flush out through diagrams to make sure we can see what we're missing and you guys can, we can collaborate over that together. Because even like, it would be simpler to do it all in the new system, my feeling. It would take longer to do that, but it would be simpler from a tech perspective. It would be more challenging from an ongoing business perspective, which is probably why we're not doing it. Whether it's API calls or synchronizations, we're going to have to make sure we can run those in parallel. Go ahead, Steve.

122
00:32:04,059 --> 00:32:32,139
Steve Muniak: And Jeff, just, we're looking to phase this out into three phases up to a year. And the intent is just to get something operational, so it's really just a lift and shift plus, then, you know, with minimal disruption to the internal sourcing teams, looking then at reducing those API calls and seeing what can be moved out and make it faster and easier for the sourcing teams.

123
00:32:36,689 --> 00:32:45,429
Nathan Bedford: Yeah. And there probably will be separate deep dives into the actual flows, because I can see you're thinking about things I haven't thought about yet, based on the way you're looking at this. Yeah.

124
00:32:45,489 --> 00:33:20,831
Jeff Olmstead: Keep us out of trouble. The simplest model, and again, mind you, it's a little bit more intensive on one or two users at a lot, but the simplest model is the platform just lives on its own. There is no API call at day one. request comes in for a part, they say, oh, let me check my Salesforce 360, I have the part, I go back into the new tool, I type in my price, and I move on, and if they buy it, very good, I go in, I create the requisition, I do the whole sales cycle, and then I come back here, and I just mark it as, here's the tracking, so the simplest launch is to actually.

125
00:33:20,831 --> 00:33:51,041
Jeff Olmstead: just have the system manage itself, because that's going to define where the weak points are, and once you've got that ironed out, and I hate to build API first, because it's going to change, they get, once you have it functioning on the front end, and it's working for both vendors and block employees, to then have a customer or a vendor come to you and say, hey, can we just automate some of this? Yes, we have an API now, and if you hit the API, or you consume it, depending which direction you're going, then you'll be able to actually do this within your own ecosystem, such as.

126
00:33:51,041 --> 00:34:25,953
Jeff Olmstead: Salesforce 360. That's my only call out, if we start doing API first, to try to make it so that block, employees basically have a requisition auto-generated for them inside Salesforce 360, which is what the tool is doing now. And then they can respond to it. You're almost, to a certain extent, it's a huge lift because you're basically rebuilding. You have the ongoing SWP 2.0, which has to somehow still work, fight with this one that.

127
00:34:25,953 --> 00:34:31,573
Jeff Olmstead: we're building on the side as they're coming in, and then it's transitioned off. It's a lift.

128
00:34:31,573 --> 00:35:03,175
Nathan Bedford: So let me tell you what I was thinking, and you tell me if I missed something here. My initial thought is based on the way that Salesforce, I don't know a ton about Salesforce's APIs other than what I've read, but if we can stream events so that we know when objects and records change, we could pretty easily not change much of the admin flow and basically, follow the change in records to see what happens when somebody's working themselves. when an admin, buyer, or seller is working themselves through the process.

129
00:35:03,435 --> 00:35:13,395
Nathan Bedford: So instead of actually having to call explicit APIs, we're watching those event changes come in and using that to synchronize our system. What's the risk with that. 

130
00:35:14,235 --> 00:35:45,255
Jeff Olmstead: You will have to basically fetch. We want to push in a public event. So, yeah, Salesforce has the capability of pushing what we call public events. Of course, you want to isolate down what data is in it. It usually just says rec ID number, whatever changed. And then you, who are now authorized to come back to the tool and say, okay, I want to get the latest data on this. Now, of course, you're going to have to know the fields and the APIs. You're actually at that point using native Salesforce API.

131
00:35:45,755 --> 00:36:05,379
Jeff Olmstead: as opposed to a custom API, which eventually you'd want to get to. So it opens up the complete object to you. It's doable. It does mean that your build is going to control what data is needed to. fill in the gaps. It's an option. It's not an API option, if you will. It's a custom.

132
00:36:05,379 --> 00:36:35,799
Nathan Bedford: build for block. Okay. And on that, so it might help, I don't want to, like, this is not a sidetrack, but this is helping me understand the complexity of the object structure from the current V2 side. Like, we were trying to just estimate how many different objects are a part of V2 between, like, the built-in and the custom ones. So, like, do you happen, if you can send us a list later if you can pull it, but I would love to see, like, if this was a database, what are the tables involved, and I think in the Salesforce world, that's the objects, right? So, like,

133
00:36:35,799 --> 00:36:47,719
Nathan Bedford: what are, is this, are we talking a half a dozen? Are we talking three dozen? A hundred? I don't know how many different types of objects we're talking about, but I'm guessing there's more than we see when we look at it with our own eyes. If.

134
00:36:47,719 --> 00:37:16,911
Jeff Olmstead: you include peripherals, it's probably a dozen. Okay, that's not bad. At its core, you have, you have an account and a contact. Yep. So, we'll just kind of throw them out, and technically you'll be used. So, let's just put those aside. Those are what we're going to do. So, let's just put those aside. So, let's just put those, What get you into the system? The user's connected to a contact. Contact's connected to an account. You can see the hierarchy. You can see other stuff within the company. That's pretty boilerplate on most platforms. If you will. So, except usually they don't have a contact. Usually it's a user and account. So let's just say, okay, basic stuff there.

135
00:37:17,791 --> 00:37:27,051
Jeff Olmstead: The major objects you have, it's called a requisition. Just think of that as the wrapper around the sales order or the request. It's the header information.

136
00:37:27,511 --> 00:37:27,871
Speaker 9: Yep.

137
00:37:27,871 --> 00:37:58,641
Jeff Olmstead: And then line levels, which are called requisition line items, no big deal, simply contain the part numbers and ultimately the pricing that was quoted, et cetera. So requisition, requisition item. And then that, when the user actually enters it through the portal, they're creating the same thing. They don't know it. They're just putting in a part request. But it makes up a requisition or requisition line item inside Salesforce. That has the automation you saw in your block imaging notifications flow.

138
00:37:59,201 --> 00:38:31,953
Jeff Olmstead: Mm-hmm. Which. That requisition then drives off things like auto-sourcing. No matter how it does it, though, you don't really care. At the object level, it just connects to a bunch of sourcing items. Whether someone manually sourced it, created it by hand, used auto-sourcing, you don't really care. All you know is one requisition item could be sourced from four, five, six different vendors. And then that requisition item eventually has to pick the winning one. And that process is accomplished through something called a shopping cart, which technically is an object.

139
00:38:32,093 --> 00:39:02,715
Jeff Olmstead: It's kind of an ephemeral object because no one cares once it's completed. It's just like it was there and it's kind of gone. But technically, there was a record of data that tracked it from, okay, I want to pick this sourcing item. And I want to use a fulfillment process through a shopping cart to then lock it down. And behind the scenes, that creates something called a purchase order. That's a standard term. So you've got the purchase order header. Now, if it's bought from, let's say there was... two parts the customer wanted, two requisition items.

140
00:39:03,635 --> 00:39:34,715
Jeff Olmstead: That could technically turn into two different POs to different vendors. That's because they bought one from AllParts, one from PartSource. The shopping cart does foster cross-company purchases. That's probably one of the trickier parts. So you end up getting two purchase orders to these vendors and the vendors on the portal also have to realize, oh, here's the PO number. They also get the ability to upload a file, a physical PDF if you want, or just type in, here's my PO number and that's acceptable enough.

141
00:39:35,015 --> 00:40:10,579
Jeff Olmstead: So I mean, at this point we've got requisition item, sourcing item, purchase order, purchase order lines, and internal to block but to no one else is this concept called the shipping note. Everyone else handles that in their own system. Now that is not exposed in sourcing window 2.0, but it is used to power the tracking number. Oh, if it was internally shipped, the tracking. number came from the internal shipping up so you can almost forget that I want you to know it's there but just forget it for your tool set okay okay.

142
00:40:10,579 --> 00:40:23,219
Andrew Bailey: well you said when you originally going through them you said shopping cart as something that exists for a time and stays there is that still something that you didn't go through in your review is that still one of the objects or or is.

143
00:40:23,219 --> 00:40:57,259
Jeff Olmstead: that just a concept it is an object the customer doesn't really think of it that way sure I mean but but it is technically a data store okay it has to for a time store the connection between these two and then when it comes to fulfillment it turns into the purchase order and everything inside the tool is connected at the line level this purchase order line connects through to the sourcing item and the rec item like you can't do it at the header level because you could have one requisition turning into two different POS that's so.

144
00:40:57,259 --> 00:41:17,082
Steve Muniak: looking for a processor the thing that, That's really clunky here, is the internal purchase order. Oh, yeah. And that's what's probably killing the sourcers. Yeah. Because you just can't buy it. You just can't kick out of your inventory and push it. You have to go tell those machinations.

145
00:41:18,251 --> 00:41:49,031
Jeff Olmstead: Correct. So to get this process to function within Salesforce, again, this was another party, and I actually pity them for having to even worry about this. But to get the process to work and not impact the accounting, because, again, this is an accounting-see-driven process, which wants to turn these POs into bills to be paid, payables, and invoices on the other side. They actually are tagging them all with fake company. It's called sourcing window company.

146
00:41:49,271 --> 00:42:03,884
Jeff Olmstead: But that keeps it out of the financial pool so that you can have customers buying and selling all day long without corrupting your finances. But that makes it terribly confusing when internal users. are searching for records and they see one, is that the virtual one or is that the real one. 

147
00:42:04,124 --> 00:42:04,424
Nathan Bedford: Yep.

148
00:42:04,884 --> 00:42:16,944
Jeff Olmstead: I will be the happiest person in the world to see all of that carried on the new platform and only the real ones to block show up in their pipeline. Like, that's the ideal state. This virtual stuff is killing people.

149
00:42:17,584 --> 00:42:26,524
Nathan Bedford: Agreed. Just thinking about some of the objects that... I'm curious if these are objects or not. Material, is there a material type? Vendors, vulnerabilities. 

150
00:42:27,303 --> 00:42:52,594
Jeff Olmstead: Yep. So this will be interesting in your space to see where you go with it. There is material, which is parts. Yep. I mean, at this point, everything in our world that we're talking about right now are parts. Now, materials in block imaging could also represent equipment, generic equipment. Then they have an equipment record which has more details. Like, you could have one GECT be expanded into a 1989 GECT, 1995. You get the idea.

151
00:42:52,774 --> 00:42:53,013
Nathan Bedford: Yep.

152
00:42:53,194 --> 00:42:57,413
Jeff Olmstead: This is the placeholder and this is the specific. But in parts, it's just the generic.

153
00:42:57,774 --> 00:42:58,174
Nathan Bedford: Okay.

154
00:42:58,214 --> 00:43:32,876
Jeff Olmstead: There is only the question in the world... the parts, whether or not tubes are unique. I don't even know if I want to get into that conversation. I'll leave that to you, Steve, because slice counts on them can, they can, the serial number matters, where on the rest of the parts, they're either tested or they're not. Say, okay, you know, like, what's the status of this part? It's tested, right? Or it's new, right? You know, it is what it is. Tubes and coils are probably the only thing that's a little wonky where people start to care a little bit more. But you have this material, this generic thing, which is the placeholder for every part.

155
00:43:33,096 --> 00:43:48,366
Jeff Olmstead: And you are correct. It connects up to additional objects, like, that we internally call modality. It's from a CT, manufacturer. Yes, those are tables. The customer experience doesn't interact with that. I mean, they interact with them.

156
00:43:48,486 --> 00:43:48,646
Nathan Bedford: Right.

157
00:43:48,726 --> 00:44:19,920
Jeff Olmstead: But they're not generating manufacturers. They're not generating modalities. Those are defined. And in the API world, like, you have to align with our naming convention so there's mapping tables if we get there. That's like two. point that's release two three whatever yep so the parts are stored in the materials and they're tagged with these you know modalities gear whatever you need to tag it we do allow in sourcing with a 2.0 customers to create their own they don't know they're creating their own but they're allowed to come in look.

158
00:44:19,920 --> 00:44:42,800
Jeff Olmstead: up their part number goes through a series of searches can't find it they can technically add new which I know makes Paul Beard so excited because it's always the highest quality data when they're searching for a partner so in a perfect world those get flagged and then someone reviews them in the real world I don't know that anyone reviews them I think they are becoming clutter and.

159
00:44:42,800 --> 00:44:46,940
Steve Muniak: noise that can be part of the requirements is making the data.

160
00:44:46,940 --> 00:45:06,812
Jeff Olmstead: integrity and taxonomy perfect I assume part of that will shift to the new engine in terms of and then whatever quote employees are hired by that new entity or, I don't know the legal relationship, but somehow it will be managed there would be my understanding.

161
00:45:08,342 --> 00:45:41,282
Nathan Bedford: Yeah, you're right. That's actually a good example. We talked about yesterday about where the source of truth and material will live. It will probably still live in Salesforce, but we'll have things synchronized with the new tool. Either way, I'd like the new workflow that Steve was talking about to be obviously part of the new tool, where we do what we can to clean the data to have it go through an approval process or flagged or whatever. Okay, so this is helpful to hear. Because what we realize we haven't seen actually, we don't really need to see now, but we'd like to know in general. There are what I would call master data lists that need to be maintained.

162
00:45:41,362 --> 00:45:49,062
Nathan Bedford: They're certainly maintained in Salesforce that we will have to build into the system. They're going to be relatively simple, but they'll be really important. Yes, Carlos. 

163
00:45:51,012 --> 00:46:23,214
Karlous Malcolm: This is something I guess I would think to highlight now. When you start using the product, the same exact item, and that, yeah, you don't want to run into, again, being in the hospital and then, of course, seeing it here, you know, dealing with that issue of, you know, people, you know, GE in general, like you can see it out there, all being able to be illest in.

164
00:46:23,214 --> 00:46:27,554
Karlous Malcolm: your system, doing the same thing. There's a call out.

165
00:46:28,114 --> 00:46:29,654
Nathan Bedford: Sorry, Carlos, I'm missing that one word.

166
00:46:29,894 --> 00:46:30,694
Karlous Malcolm: It's on this part's concept.

167
00:46:31,054 --> 00:46:32,434
Nathan Bedford: Can you say that one word again, illest. 

168
00:46:33,794 --> 00:46:49,564
Karlous Malcolm: Illest. Illest, okay. Just the idea that there are things that have, people refer to multiple, the same thing in multiple ways, people want to have multiple entries in your, whatever design you go with. I just want to say that I would, from the get-go, do a design around that concept.

169
00:46:50,304 --> 00:47:23,016
Nathan Bedford: Yeah, yeah, and that one, in fact, we'll probably be in touch when we start working on that because there's a lot of ways I can think about how we can handle it technically, and I'm really curious what you guys have seen from your experiences. waste that like I don't want to I mean it's easy to draw relationships and connections but like my mind goes to like how often do parts come out and how how hard does it have a workflow that first starts with AI and searching canonical sources that leads to some person saying yep that's right or wrong that might not to your point Jeff that might never happen um so like we'll see how much we can do that's automated but if data integrity is really important we.

170
00:47:23,016 --> 00:47:53,736
Nathan Bedford: want to make sure we do everything we can to get to like the one part that might have aliases that are useful for searching but like you know we're not gonna have ideally we wouldn't have five parts in that mean the same thing we'd have one part with some extra property that connects it for easy search that would be my intuition unless you guys say no everybody just think they have to stick with the name they want to use the name they want to use but it means this part like can we I know we can't change everybody if we can change the way they think I'd love to but if we can't then we need to account for that with aliases.

171
00:47:53,736 --> 00:47:57,046
Nathan Bedford: or whatever that's gonna look like yeah the design concept.

172
00:47:57,046 --> 00:48:33,120
Karlous Malcolm: yeah the design concept yeah the design concept and as you just said is it that's gonna be a team, to say that the general idea to be something that when you initially work on this when it comes to stuff to be prepared to handle okay um again i i go about doing some first view but just to be prepared to have that concept not that oh hey people are always going to be coming looking for, ge you know part x um alone and just say oh that's not there now create a new entry because the g part x might be the same as general electric part x yep that's really just just it okay that's.

173
00:48:33,120 --> 00:49:03,892
Jeff Olmstead: helpful so some of it will depend on how you're anticipating doing the search experience if you're going to force them to go through picklist of course you have a lot more control if you're going to open it up to free text of course then you're going to have to really deal with these aliases aliases also come up when we're mapping in inventory which i realize is not this first phase, someone like carlos i might say, GE could be General Electric, and we will map it to the internal.

174
00:49:04,742 --> 00:49:36,242
Jeff Olmstead: So there is the concept of an alias table is at least critical. I would tell you that the part number experience is the way it's handled at Block Imaging today. Every part number gets converted into something called a raw part number. That's the 99% of the time the search method that's used. The raw part number formula is super top secret. We remove all the dashes. We trim the leading zero. Unless there's two zeros, at which point it apparently has different meaning.

175
00:49:38,142 --> 00:49:58,842
Jeff Olmstead: It's literally a one-line formula that makes a world of difference in actually getting the exact part the customer wants. You can have a display part number. You can have a raw part number. Then you can go down the world of fuzzy searching if you want to. But I bet if you asked it across the team, 85-90% is just part number search.

176
00:49:59,102 --> 00:49:59,682
Jake Herwaldt: Okay, good.

177
00:50:00,064 --> 00:50:01,844
Jeff Olmstead: And then there's the manufacturer part number as well.

178
00:50:02,544 --> 00:50:27,544
Steve Muniak: Good call. Which is different. That's fun, too. Or maybe. There's all kinds of variants in there. Jeff, my experience at PartSource and then dealing with them for the past six years, boy, if we could form an industry consortium just around part number management, there would be a lot to do. But that's their secret sauce. It's going to be our secret sauce.

179
00:50:29,174 --> 00:50:51,064
Jeff Olmstead: Carlos made a good point, and I didn't call it out. A part number is not globally unique. So companies, across companies, you can't just say because the part number matches, it's a match. It's an indicator that it could be a match, so that the customer experience still kicks in to have the details to pick the correct one.

180
00:50:51,304 --> 00:50:57,374
Steve Muniak: Philips will have a part number for service stock assumed by Philips service and sold as a replacement part number.

181
00:50:57,844 --> 00:50:58,544
Nathan Bedford: Different. Okay.

182
00:50:58,624 --> 00:51:09,876
Steve Muniak: They're commercial. So a probe for service stock can be part X, Y, Z. A probe being sold commercially could then have the identical.

183
00:51:10,906 --> 00:51:15,946
Nathan Bedford: Okay. Would it be the identical manufacturer part number? No. Is there any common number. 

184
00:51:16,146 --> 00:51:22,776
Steve Muniak: Those manufacturer part numbers are different, even though it's the same exact product. It's based on market numbers.

185
00:51:23,466 --> 00:51:30,306
Nathan Bedford: Is there any commonality anywhere? No. Okay, got it. So that would be eventually where we build the compatibility list or whatever it is.

186
00:51:30,306 --> 00:51:33,866
Steve Muniak: Yeah, and it's more on the environment side, but it does cross over to someone.

187
00:51:33,866 --> 00:51:50,186
Nathan Bedford: Okay, got it. I'm sufficiently, yeah, I can see this is more complicated than just part numbers, so that's good. We will make sure to reserve a good time for that. I had a chance to work with Bosch in a similar capacity, so I at least got a chance to see some of this, but I'm sure it's a little different when you go outside of just one manufacturer like you guys are doing.

188
00:51:51,206 --> 00:51:55,406
Steve Muniak: Bosch is a great example because there are parts being sold under multiple brands.

189
00:51:55,606 --> 00:51:56,446
Jake Herwaldt: Yeah, that's right.

190
00:51:56,546 --> 00:51:57,326
Steve Muniak: Through multiple channels.

191
00:51:58,306 --> 00:51:59,166
Jake Herwaldt: Yes, okay, cool.

192
00:52:00,000 --> 00:52:14,270
Jeff Olmstead: Steve, what is the vision in MVP Plus for compatibility? That was a good mention that was just made. Is that something going into this initial bake? I don't know. I don't know.

193
00:52:15,220 --> 00:52:24,370
Karlous Malcolm: Yeah, that's literally why I had my hand down. I just presumed, though, that that was a thought that you mentioned.

194
00:52:25,270 --> 00:52:32,610
Nathan Bedford: We had talked about it. We had talked about the value of it, and especially crowdsourcing it. But I don't know what the value of it is.

195
00:52:32,650 --> 00:52:55,420
Karlous Malcolm: The value is there. I guess when you mentioned compatibility. I literally had my hand raised for you to kind of, when you build out your parts thing, to consider that as well. I lowered it because since you mentioned the word, I presumed, oh, okay, that's already been brought up. But now I guess I find it tricky that it may not be there, at least in Plus anyway, but eventually. Anyway.

196
00:52:57,180 --> 00:53:29,082
Jeff Olmstead: For context, for those who have seen the notes, flow on the left side stack there's this inventory sourcing in there the question of block has inventory yes or no block has compatible inventory that, compatible inventory diamond is checking to see like because the internal the Salesforce 360 there is a table this part is interchangeable with this part but by the way that doesn't always work in reverse so also consider that it can.

197
00:53:29,082 --> 00:53:35,422
Jeff Olmstead: be one directional not the other it's called yeah I can see how that would.

198
00:53:35,422 --> 00:53:42,392
Nathan Bedford: happen it's happened in my car park yeah yeah so the diagram has some coverage of.

199
00:53:42,392 --> 00:54:16,054
Jeff Olmstead: it to at least consider but okay let me just think out loud I mean so you got your material you got your factory you got your modalities that's your major stack optionally you have compatibility across the two which is great all of these are used, customer to do a park request which in their system is called a requisition item technically but it gets wrapped with a requisition header information that, can spin off one two or twenty different sourcing item requests hey anyone want.

200
00:54:16,054 --> 00:54:48,474
Jeff Olmstead: to put a bid on on this give me the best price if the customer appreciates that one he can put it in his cart which is its own object that will once he gets a collection of the carts he can quote unquote check out no new object just an experience and then that allows him to end up making actually could be multiple purchase orders and upload his files or attach a video number they, really the piece that you need to make sure swings background that people really care about is eventually the tracking number and the serial number of.

201
00:54:48,474 --> 00:54:58,884
Jeff Olmstead: the part that was shipped has to become part of that process that's kind of like the last mile but field engineers really want that naturally yeah okay I'm sorry.

202
00:54:58,884 --> 00:55:26,086
Karlous Malcolm: you've mentioned the sterling register, Be mindful of that kind of thing. That's true. I don't even know. They just leave it blank? Different people, NSN, NA, you know, cat farts. In a thematic way. So every part. I'll just cite those, yeah. Just be mindful that some parts aren't sterilized. And to Jeff's point, yes, that should be a part of it. Parts are kind of pawns. Just apply.

203
00:55:26,406 --> 00:55:30,696
Steve Muniak: And again, when we get to biome, which is consumer as opposed to NASA.

204
00:55:31,606 --> 00:55:59,716
Nathan Bedford: Yeah, I'm going to ask you another question. All right. One just tangential thought I had. We were talking, Jeff, about notifications. If, like I know you guys have a bell icon right now. How much can, through the API, can that notification be manipulated? Like, I think we're just talking about emails going out. But I haven't really thought about synchronizing the communication. Is the chatter, is that a.

205
00:56:00,000 --> 00:56:33,640
Jeff Olmstead: object or is that how is that better yeah yeah in turn this is really interesting if you ask users they'll say I want emails on everything which honestly becomes a lot of intriguing yeah because they get into email overload what we've shifted more towards especially with this notification projects all emails that go out to anyone are locked against the record so you have a digital record in the house so some support person happens to be out it's okay the email message that was corresponded is locked inside Salesforce.

206
00:56:33,640 --> 00:57:05,312
Jeff Olmstead: I don't know if we'll be pushing to retain that if it's obviously if it's an external to an external buy sell block machine they don't care I mean technically right now they get insight into all of it whether good or bad, moving forward you have the options for notifications of email yes always there is a little bell icon in the top right corner which is a very short hey something happened click here to go to, it. That's usually how that's used. And then there's chatter, which is a broader feed. But.

207
00:57:05,312 --> 00:57:36,622
Jeff Olmstead: chatter requires for the most part that it be associated with a record. So the bell icon might have an advantage of like, hey, click this link to go to sourcing window 3.0. It could just route you outside of the ecosystem, if you will. Chatter could do the same thing, but it expects typically, that it's alongside like a rec or a PO, you know. So if there's an existing purchase order and something happened in 3.0, you know, hey, at Vicki, just wanted to let you know the customers.

208
00:57:36,622 --> 00:58:30,924
Jeff Olmstead: requested this. Now, the one component we haven't discussed, I guess, and that's kind of my fault, that's where EMA kicked in. You've probably heard that acronym thrown around. EMA was to bridge the gap between the external buyer-seller relationships. Short little chat mechanism, file upload, et cetera, where they could maintain their communications. channel. I don't know what the plans are for that type of experience between buyer and seller in the new system. But that was where EMA bridged the gap. They didn't go native chatter because native chatter unleashed a whole bunch of security, really oddities within Salesforce if you let your portal users consume it. They can literally ad mention anyone in the company. It's extremely hard to try to lock that down. So that was where EMA kicked in to control the conversation. And also.

209
00:58:30,924 --> 00:59:00,054
Nathan Bedford: in some ways to simplify it. You got a text, you have files, that should be enough. Got it. That's a good distinction. We're trying to figure out. So chatter, correct me if I'm wrong, chatter is a built in functionality in Salesforce. EMA is something custom that was built to do a similar thing but with more control. A simplified thing. Yeah. Correct. Yeah. Simplified. It can wire up in a similar fashion to any parent record. Okay. That's why it can sit on a requisition sourcing NPO. It doesn't care. Got it.

210
00:59:00,096 --> 00:59:31,036
Jeff Olmstead: So it will wire up to any of them, and it will inherit the permissions of that record. So if you have access to the record, you get access to the underlying messages. So in that way, it's similar to Chatter. But then what it did is it removed the capabilities of dragging other people into the conversation. Because you could literally be on there and be like, at part source, what do you think about this? No, we're not going to answer that. So the conversation stayed between the buyer and seller in a very controlled manner without allowing it to bring everyone else in on it.

211
00:59:31,176 --> 01:00:04,400
Nathan Bedford: Okay, yeah. I've heard from the team pretty extensively that getting messaging right is really important. So we'll probably be talking to you guys about lessons learned. But in general, everything that exists right now as far as the ability to chat back and forth with vendors on the REC and also on the PO afterwards, that's all important. And since you can imagine we're building it kind of from scratch, we'll have a chance to make a more unified experience so that people can... and search across all the things related to... a connected entity and you know not to click back and forth that will be able to search across the.

212
01:00:04,400 --> 01:00:24,750
Nathan Bedford: board for the right for the right scope so like we envision i'm curious to see how that looks but like you know it wouldn't be that challenging to say i know i talked to this vendor about something at some point and a search can be that broad or it can be intentionally narrowed down to just a po or just a wreck um so okay that's gonna be a fun one to redo okay yeah in in the salesforce.

213
01:00:24,750 --> 01:00:56,420
Jeff Olmstead: ecosystem the way file security is managed which might be appropriate enough um for even what you're doing file security i'll give you the technical answer and then i'll give you the realistic answer salesforce allows you to have a file and then they have something called content links which allows you to link it off the record and it actually assigns sharing permissions, to that record it's not a person you're actually sharing to the record, and then if someone has access to the record they just get the file i don't even know that.

214
01:00:56,420 --> 01:01:20,552
Jeff Olmstead: you need to have multi-connect on a file that's just what salesforce does for, the whole ecosystem. It literally is always one file goes with one record. And so in that space, it's like, okay, you have access to the record. Sure, you can read the file. It probably can be as simple as that so that people who have access to it can see the PO, people who have access to it, whatever, can see the invoice, you name it. Yeah, great.

215
01:01:20,852 --> 01:01:24,622
Andrew Bailey: Hold on one second. Did you ask if the chat is on a part level. 

216
01:01:24,822 --> 01:01:33,122
Nathan Bedford: another quote level, or is that what I was saying? It doesn't matter if it's country. Yeah, I think whatever was, I know it was, whatever was discussed, kind of legal.

217
01:01:34,212 --> 01:01:57,472
Jake Herwaldt: Legacy data is one thing, too. I want to think. We haven't talked about this yet internally either, but just to hit me, it's like when this launches, MVP Plus, do we expect people to be able to see what they did in Sourcing Window 2.0? Like external vendor, external buyer. I would, as a user, I would expect to be able to see what I did last week, even though it wasn't in the new system.

218
01:01:57,492 --> 01:01:59,092
Nathan Bedford: Like the history of orders, I'd imagine so, too.

219
01:01:59,252 --> 01:02:01,824
Jake Herwaldt: And like history. of chat and history of stuff.

220
01:02:02,684 --> 01:02:09,184
Nathan Bedford: Yeah, we know there's gonna be some kind of migration process of data. We haven't talked about what that's all gonna look like. Would you say that's a fair expectation. 

221
01:02:09,784 --> 01:02:13,284
Steve Muniak: I would say, users will want that. It's an expectation.

222
01:02:14,064 --> 01:02:18,644
Nathan Bedford: Yeah, the list depends on whether it's, okay, that makes sense.

223
01:02:18,904 --> 01:02:42,474
Jake Herwaldt: Do you see any concerns in that? I mean, that would essentially just look at us, migrating over specifics for that external, because you mentioned how it would be nice to not have external to external within Salesforce, which would be the goal, but to start, we would have to essentially migrate or duplicate that data over into our new system.

224
01:02:43,774 --> 01:03:16,296
Jeff Olmstead: I'm gonna do a quick screen share, because we had to go through one migration historically. I'm in Sourcing Window Pro. There's a tab called Historical Sourcing. That took it from 1.0 to 2.0. So this was the data that people pretty, much settled on is like okay this is this will make everyone at least happy they can see sourcing item vendor material quantity status pricing like that there's actually a lot more data but to accomplish the mapping and to try to get into a position that it was one for one was almost impossible so you.

225
01:03:16,296 --> 01:03:29,396
Jeff Olmstead: might be able to even approach it from a perspective that says we have this, simple historical sourcing which is different yeah and then the actual.

226
01:03:29,396 --> 01:03:37,226
Nathan Bedford: experience got it I like that I mean that's like it that's a good fallback and that we can at least show the key data yeah at least it's been done once.

227
01:03:37,226 --> 01:03:52,816
Jeff Olmstead: it's been to be at least satisfactory that's great let's stop yeah and I think you guys have seen you've seen this part of the of the experience correct yes right so I'll kill share I just didn't think anyone probably had pointed out.

228
01:03:52,816 --> 01:04:22,890
Nathan Bedford: what the world that tablet there is actually for no that's a good fallback, Because you're right, we can still even have the key data and then what I would probably naturally do, unless we find out what, it would be good for us, even if you're an admin, to be able to click a button and see the original source in more of a JSON dump format, but you wouldn't have to migrate that over. It'd be like a special, it's a little column, that gives us that view if we need it. Okay. So you're saying click the column CDA. Yeah, yeah, it could be as simple as that. It gets there, but it's not a first class part.

229
01:04:22,890 --> 01:04:24,610
Nathan Bedford: of the platform, but you can get to it if you need to see it.

230
01:04:24,770 --> 01:04:26,030
Jake Herwaldt: Okay, that's more than acceptable.

231
01:04:26,290 --> 01:04:26,830
Nathan Bedford: Yeah, okay.

232
01:04:27,270 --> 01:04:50,610
Jake Herwaldt: And then that brings up another question, which we can punt this to later, but what does launch look like? What does launch look like in terms of are you keeping Sourcing Window 2 open for three months and it's running in parallel? Can someone use both on day of launch? Are we killing Sourcing Window 2 and routing the user to the new system and just saying. 

233
01:04:51,290 --> 01:04:54,050
Steve Muniak: You know, all of the above, but it depends on how much .

234
01:04:54,390 --> 01:04:54,790
Jake Herwaldt: Okay.

235
01:04:56,170 --> 01:05:04,422
Steve Muniak: And frankly, Jeff, you know, my head is still spinning from, Moving all sourcing into the tool immediately, but in a very good way.

236
01:05:05,562 --> 01:05:39,442
Jeff Olmstead: Yeah, my paradigm what we had just for perspective on what we had done the last time we migrated from one to two We had Mike we had migrated the three months of data, Because in the world of parts things live and die usually within a day Yeah, so we had migrated for the for the external side of things we did like three months which was active So that was I'm not sure it's great, but you can imagine it that was full data intact. Here's the here's your request.

237
01:05:39,442 --> 01:06:10,874
Jeff Olmstead: Here's the quotes so that you could pick up and start, Consuming them if you will you actually nailed it though if you try to go into a split environment instead of doing a hard cut My head will probably explode like a do I not have to synchronize these I mean it would be really challenging So it is a big hurdle, But if we, with a three-month model, we said, here's three months so you can get to work, and then we're going to trickle in the sourcing historical so that you have access to it.

238
01:06:11,174 --> 01:06:20,694
Jeff Olmstead: And that actually was found to be satisfactory. People are like, as long as I get the historical stuff eventually, that's fine. It's the day-to-day operations we don't want to see impacted.

239
01:06:21,524 --> 01:06:25,824
Steve Muniak: The world's looking at a couple hundred transactions a month, actually. Not much. Good.

240
01:06:26,684 --> 01:06:40,324
Nathan Bedford: Just getting back to the thing that blew your mind real quick, make sure I'm caught with you. You're saying we might – I like the simplicity of what Jeff said. That's what we would like to do, too. But it felt like the challenge was getting the admin folks on board with doing that.

241
01:06:40,544 --> 01:06:50,844
Steve Muniak: Yes. So that's where I've got to pull in and start to talk to Erica and Ali, who are two SMEs on this, to say, what does this feel like. 

242
01:06:51,064 --> 01:06:55,584
Jake Herwaldt: Because that kills your automation that they currently have. Well, it doesn't kill it because we're creators.

243
01:06:56,324 --> 01:07:26,366
Steve Muniak: They're really not even creating the request at that point. requisition, right? All they're doing is saying, I have a part need, let me go out and source it. And if they, and once they've sourced it, it returns to the vendor, the requisition gets created, the PO gets created, it gets dropped into, all that happens. That's a, looking out to another screen, if it's really effective and user friendly and fast, that might just be a part of the recognition itself.

244
01:07:29,646 --> 01:07:30,686
Nathan Bedford: There was a comment with.

245
01:07:30,886 --> 01:08:04,880
Jeff Olmstead: If not AppLock, it won't need one anymore. I gotta be careful saying that. If an engineer in-house AppLock is in the field and they say, hey, I need this part, that internally generates a requisition. Now, the good news is that's actually a block one, it's not one of these fake ones. Yeah. Now, then what would happen is, presumably, Ally would say, okay, we are no longer sourcing with our tools. I go over to 3.0, I throw in the part number, usually it's one, let's say it's two. I throw in the two part numbers, I say, yep, boom, boom, check, and then she just walks away.

246
01:08:05,560 --> 01:08:39,680
Jeff Olmstead: At that point, the sourcing mechanisms over on that engine should kick in, the notifications should kick in on that engine, and when she's like, oh, I'll take that one, she would, again, this is a non-API approach, which I personally like, because I think it's the fastest way to launch, and she said, okay, I took that one, she comes over here, fills out the PO, like she already does, she already has to go through a PO process internally to buy anyways, she fills out the PO, and then she transposes the purchase order number into the other system, uploads the PDF if she wants to, they do that right now today anyways, even though they're in Salesforce,

247
01:08:40,800 --> 01:09:10,162
Jeff Olmstead: don't even get me started, we actually just fixed that a month ago, they had to download the PDF to re-upload it, so sourcing window had access, don't even, yeah, anyways, so she's already, they're already really well prepped at doing this, they make the PO, download it, they have the PO number, they upload it in the new system, and then eventually in the new system, it's going to give her a tracking number. which she will happily put back into her PO so the engineer gets it. I know it's a touchpoint, but it's about the exact same number of touchpoints they're doing today.

248
01:09:10,882 --> 01:09:27,992
Jeff Olmstead: And it allows you to stabilize the platform. And then when you bring in an API, they're going to be like, oh, my word, this thing's amazing. But on day one, you did the MVP plus because it's a nicer experience. You technically haven't reduced steps, but you've at least started the shift.

249
01:09:29,072 --> 01:09:35,922
Karlous Malcolm: It's just earlier when you were describing it, when a buyer wants something, that is a requisition record.

250
01:09:36,652 --> 01:09:41,772
Jeff Olmstead: Yes, and that would go away because the other platform takes care of that now. Block won't have to worry about that.

251
01:09:43,492 --> 01:09:53,212
Karlous Malcolm: I thought you meant from a sourcing perspective that that was a requisition. The buyer wants to create a requisition record.

252
01:09:53,672 --> 01:09:55,602
Jeff Olmstead: It does today, yes.

253
01:09:56,042 --> 01:10:17,084
Karlous Malcolm: Okay, so I guess we'll just utilize the same verbiage. When Steve was talking... I mentioned something about a buyer and then possibly then create a requisition in my head. No, someone wants it. If we're going to use the same terminology, the schema may be different. I'm just saying the terminology is the same, at least for me anyway, is that my head, if someone wants it, is it creating a requisition. 

254
01:10:18,034 --> 01:10:38,014
Jeff Olmstead: Yes, it is. The only difference is when an external user would make it, it would tag it with like a sourcing window pro company instead of the block. So it's like this virtual thing that created a lot of clutter. Both requisitions, it's just one block created, one an external customer created, and they're both in Salesforce as recs.

255
01:10:38,364 --> 01:10:48,334
Karlous Malcolm: I found that part of the same when we were speaking before about the sourcing window three perspective that I wanted to make sure I understand. Again, someone wanting something is a requisition.

256
01:10:48,974 --> 01:10:59,934
Jeff Olmstead: Yes, agreed. Steve, I don't know, but I would assume the engineers would still request from the internal team. I don't think on day one you're going to throw them over.

257
01:11:00,096 --> 01:11:09,506
Nathan Bedford: this new tool maybe maybe if we can make it better for them really just sort of a reminder right now.

258
01:11:09,506 --> 01:11:25,866
Karlous Malcolm: that the engineers want them they don't create a requisition they just simply add something into their basket which and then and then i'm just fyi i know the coaching is going on yeah and then the.

259
01:11:25,866 --> 01:11:59,826
Jeff Olmstead: csr just fyi i'm calling it out because right now the to be released by end of this month has the engineers actually generating the requisition so there is there's even the procurement team right now is shifting so that it creates the wreck and the procurement team fulfills the wreck or kills it okay so they all come through the same channel i see that look i'm going to get an.

260
01:12:00,060 --> 01:12:25,310
Steve Muniak: call later aren't I? Me? I don't do that. Jeff, I'm all in learning mode. I don't do that. No, Carlos. Carlos will give you a call. I'm actively typing, checking to you right now. Alright, we've all been drinking coffee. Let's take ten minutes for a break here and let Carlos finish that nasty round. Alright. See you in ten.

261
01:12:25,570 --> 01:12:59,440
Nathan Bedford: Let me see this. So you know what's funny, Steve, is I had like Claude make a agenda for me. It had a break at 1020. It was pretty close. Well, there we go. Just write it on the numbers there. Okay, so one deep actually, AI? He might be. Steve, am I missing something though with the idea of doing this like side-by-side launch? I think there's a lot of risk that tech will. Well, I'm confused on where does the tier magic happen? The auto-absorption. Right now, it's in Salesforce and we could keep it there. That's I think what's the noise. You could still do that from our system? We certainly could, but I think this is the part that needs some deeper work. Because you are going to use it. I'm missing it.

262
01:13:00,032 --> 01:13:02,532
Andrew Bailey: This is going to be that deep dive de-risk.

263
01:13:03,012 --> 01:13:12,352
Jake Herwaldt: Well, because it would be like you go in the sourcing window 3.0, you create it, which then kicks off the auto-fill source. What I'm saying is, so in this case. 

264
01:13:12,472 --> 01:13:43,762
Nathan Bedford: this is like how much, I mean, I'm with Jeff on this. Yeah, yeah, yeah. If you're not, I think, and I totally agree with you. But if we're letting them, if admin keeps on doing it, it's like internal. But I'm assuming I need somebody to tell me that they do whatever they're going to do, records of objects are being changed, records are being changed. Yeah. All the magic is already there. And then we just silently reproduce.

265
01:13:43,762 --> 01:13:51,282
Nathan Bedford: whatever needs to be reproduced in the new system so that the vendors get updated. Or if Uber is on external, it's updated. Definitely.

266
01:13:52,552 --> 01:14:23,354
Jake Herwaldt: It could have side effects, like things changing. We need to understand data flow really well. I feel like, how would you have ours, like I just don't see how a user, a block user, logs in and says, I need a part, and then you can walk. It starts with a lesson.

267
01:14:23,754 --> 01:14:23,954
Jake Herwaldt: Yeah.

268
01:14:24,114 --> 01:14:35,154
Nathan Bedford: And less is then, by creating that trigger. That's what they have to be. Yeah, and that's what they can make all day if that's what they want to do. I'm also curious, maybe they have, instead of, instead of having, like, if you have to expose them. 

269
01:14:35,524 --> 01:14:45,154
Jake Herwaldt: maybe it's actually a system that they eventually want.

270
01:14:45,214 --> 01:15:00,054
Nathan Bedford: That conversation is its own, because I think we're all educating each other on what's right, but it tells me, either this is new enough, that we're like. 

271
01:15:24,496 --> 01:15:44,506
Jake Herwaldt: We're assuming that their current is different if all they want, which I can see. No, then you should let me go do this. I think probably this is a big workload.

272
01:15:46,336 --> 01:15:59,766
Nathan Bedford: It couldn't be done. I think it needs to be done. We can see it and say that's hard, but I really don't think this is my gut.

273
01:16:12,140 --> 01:16:13,260
Nathan Bedford: I'm putting it out in like a lucid chart.

274
01:16:25,460 --> 01:16:27,140
Andrew Bailey: That's what I was trying to do.

275
01:16:27,200 --> 01:16:43,940
Nathan Bedford: I think we know this one needs to be here. By the way, object is a table. And so is force. Where it's in like a JSON database. Objects are tables.

276
01:16:44,320 --> 01:17:13,972
Andrew Bailey: Or I call it entity. Which is why I was over here building, oh, which I like.

277
01:17:15,882 --> 01:17:16,322
Andrew Bailey: Yeah.

278
01:17:20,732 --> 01:17:30,982
Nathan Bedford: No, it seems good because it tends to like those things. And we probably are tuning it a little bit. Oh, totally.

279
01:17:31,142 --> 01:17:47,772
Jake Herwaldt: And we've got just the images. More complex than having to use one thing at a time. That's something that we really have. I mean, I'm glad to help. But I think that's something.

280
01:17:48,452 --> 01:18:03,964
Nathan Bedford: Imagine hosting this project. We don't want it. I'm thinking about how it's going to be in my own cell. So my feeling is they're still going to want that. I mean, I would describe it as a really fine bus. It doesn't have to have your own parking.

281
01:18:04,984 --> 01:18:11,254
Nathan Bedford: Yes, they do. Then that's an adjustment for... Oh, yes, to your point, they had the majority of the problem.

282
01:18:21,704 --> 01:18:25,644
Jordan Clark: You leave it immediately after All Parts is visiting tomorrow, or.... 

283
01:18:25,644 --> 01:18:27,944
Steve Muniak: Yeah, I'm going to try to get there by 3.30.

284
01:18:28,124 --> 01:18:28,304
Jordan Clark: Okay.

285
01:18:28,484 --> 01:18:32,714
Steve Muniak: But then it gets closed tomorrow as well. Yeah, yeah, yeah.

286
01:18:34,044 --> 01:18:34,864
Nathan Bedford: I need to get home.

287
01:18:35,084 --> 01:18:43,584
Jordan Clark: Yeah. It's been a long run. Yeah. How many days were you home? You drove back up on Sunday this week? Yeah, so I cooked all day Saturday.

288
01:18:44,044 --> 01:18:53,924
Steve Muniak: Right, right. Sunday, so we left the house at 8 o'clock and Sunday morning we got out of the sack. Okay, what is it? Sure. Even like...

289
01:18:56,304 --> 01:18:58,664
Jordan Clark: When did you go home from last week? Thursday, Friday. 

290
01:18:59,044 --> 01:18:59,584
Steve Muniak: Yeah, we're home Thursday.

291
01:19:22,896 --> 01:19:27,396
Nathan Bedford: Why is it down 50 points, I don't know, is it because of the guitar attack. 

292
01:19:27,396 --> 01:19:32,376
Steve Muniak: I tell you, I didn't know that, but 50 points is nothing, that's just a sneeze.

293
01:19:32,536 --> 01:19:36,836
Nathan Bedford: Oh, and that, okay, good to see. Because I know, yeah, I think Israel launched an attack on Qatar yesterday.

294
01:19:37,356 --> 01:19:38,276
Steve Muniak: Yeah, I saw that.

295
01:19:39,226 --> 01:19:48,566
Nathan Bedford: That NATO shoots down Russian drones in Polish airspace. Oopsie-daisy. What's going on there. 

296
01:20:01,460 --> 01:20:32,610
Jake Herwaldt: Did you see that someone was watching some, like, pragmatic engineer or something? But anyway, somebody hacked a system using, like, an open PR that was, like, and then it basically, anywhere it was RAM, tried to, like, access Claude and, like, do some stuff, and it was able to. Okay. And then at the end, you try to open a terminal, it turns out it turns your computer off.

297
01:20:33,540 --> 01:20:34,580
Jake Herwaldt: Like, ooh, that's rough.

298
01:20:42,080 --> 01:21:10,172
Nathan Bedford: Somebody, we were talking about this before you got here, somebody who's a core maintainer of 18 different repos on Cam's computer system. Oh, that's the guy. Yeah, that's. But the good news is people don't tend to go to Node for business. He's going to go to Java and see if he has to. That's the big enterprise backing. So it was not a business critical hack. He was trying to collect something around Bitcoin. Not going to be a problem to him.

299
01:21:11,932 --> 01:21:13,192
Steve Muniak: All right, let's kick this off.

300
01:21:16,102 --> 01:21:49,262
Nathan Bedford: Where were we even at? I think, I don't remember. I guess, can we wrap up the fact that we know, I believe the hybrid, the nature of where, how internal it's going to be in this existing process versus the new is like a great discussion that will probably have to happen in the future that'll be, I'm hoping we can diagram a lot of it so that our terminology will be aligned and then you guys can point quickly and say, oh yeah, this is like a landmine you should watch out for. Because I would love from a technical simplicity to say,

301
01:21:49,322 --> 01:22:22,044
Nathan Bedford: yeah, it's a new system, it's a new cutover, there's no synchronizations, off we go. But I know we have to work together with the business to make sure we don't move faster than. people are ready to move and we don't miss important important things so i love the idea that you were saying jack about, there is a rolling there's a way we can do this we can make sure we get the business continuity running and we can bring historical stuff in if we need to that's a good phased approach it doesn't, make us do a big bang more than we have to so okay i think we'll be setting up meetings in the future to go over that more in depth.

302
01:22:22,044 --> 01:22:53,784
Nathan Bedford: because like to me all the external flows are really straightforward from a tech perspective the internal flow is where it gets complicated and thinking about uh and if we have to do some kind of parallel launch, obviously that introduces complexity too um is it possible is there like a list a way you can run a pull list of objects in salesforce related to, sourcing window v2 for us so we can start to think around like i'm thinking for instance are there material is there like modalities that might have types are what are the little master data.

303
01:22:53,784 --> 01:23:03,836
Nathan Bedford: lists i haven't thought about like do vendors have types tiers i know tiers probably have to be defined somewhere um all those, those little things connected to the main entities that I just might not have thought about.

304
01:23:04,786 --> 01:23:36,696
Jeff Olmstead: Yeah, only there's no automated way other than just the mind dump that we've started here, which AI will help us extract a bunch of it. One other one that should probably be on your radar, is as an object, what do they call this term? I'm trying to get the right term from this diagram. Are you planning on launching into sourcing within, in other words, connected buyers and sellers. 

305
01:23:36,696 --> 01:23:40,816
Nathan Bedford: Yes, that'll be a feature that we'll have to incorporate, yeah.

306
01:23:41,256 --> 01:24:11,610
Jeff Olmstead: Are you going to use that, Steve, here's the words I'm looking at. Block imaging internally has tiers of vendor. You're a tier one vendor, you're a tier two vendor, you're a tier three vendor. And so you can have connected vendors, which is... Usually, that's a native sourcing window thing. When you all parts sign up and you hospitals sign up, you say, I'll get on your platform, but only if all parts is always notified when I want a part. Very good. You will be connected to them.

307
01:24:11,690 --> 01:24:26,430
Jeff Olmstead: We can foster that. That's connected. There's also a lower level of block imaging, which is who block will source from. So block will only source from a Tier 1 or Tier 2. I'm checking quickly.

308
01:24:26,490 --> 01:24:31,910
Steve Muniak: We can go Tier 1, Tier 2, Tier 3. Three. There you go. There is the excluded or whatever.

309
01:24:32,090 --> 01:24:33,970
Jordan Clark: It begins with the concession.

310
01:24:34,290 --> 01:24:34,970
Steve Muniak: Concession. That's it.

311
01:24:35,210 --> 01:24:36,190
Nathan Bedford: It doesn't mean platform.

312
01:24:36,910 --> 01:24:44,750
Jeff Olmstead: We've gone into that pretty thoroughly. Is that going to come into the new system, or is that still a block thing? It depends.

313
01:24:45,170 --> 01:25:06,892
Nathan Bedford: I think, just here's where I'm thinking about this, Jeff, when you say new system versus block thing. We want to build a new system in a way that the block things are going to be in the future API integrations that are special for block. Whether that API integration, that special code exists, it's just a matter of time. just in Salesforce, or it's some little glue code we build, it won't be baked into the new system. It will intentionally be like a plug-in, more or less.

314
01:25:07,662 --> 01:25:11,282
Jeff Olmstead: Okay, because where I'm going with that is trying to figure out if other...

315
01:25:11,562 --> 01:25:12,782
Nathan Bedford: Yeah, everybody's going to want that.

316
01:25:12,982 --> 01:25:44,292
Jeff Olmstead: If buyers desire the same tiered mentality, where it's like, you know what, I really want to just source from block initially, but if I don't hear back in 10 minutes, yeah, open it up to all parts, or whoever, like this, where each one can set their own tier. I'm mentioning that because that's the last fringe object. Outside of that, I think I could break down for you, actually, I'll just do some AI against this and yank out all the objects. There are going to be still what you said, which are some fringe fields, like pick lists.

317
01:25:44,612 --> 01:25:59,902
Jeff Olmstead: Like, okay, well, you know, the vendors could be of type whatever. But we've gone through at this point all the major objects. The only one that's still, it's great to me whether or not it's going to be built into your tool or not, is this idea of tiered sourcing.

318
01:26:00,064 --> 01:26:05,624
Nathan Bedford: And I was really curious about that. Is that a feature that, is that an advantage or a potential pro feature. 

319
01:26:06,284 --> 01:26:25,554
Steve Muniak: It is not a phase one, but it definitely needs to be on the list. And thanks, Jeff, I didn't have that vision for this, but the way you just brought it. Because, you know, I was looking at different administrative tools for vendors, customers, but not tiering. But as you described it, it makes a whole lot of sense.

320
01:26:27,314 --> 01:26:44,354
Jeff Olmstead: That can be your plus license. I mean, this is great. Because you can see that, yeah, some hospitals would be like, you know what, you got a premium edition? We do, and it supports tiering. Can we get that? I know Block values it, so I'm sure the bigger companies might also.

321
01:26:44,534 --> 01:26:45,014
Nathan Bedford: Very much so.

322
01:26:45,074 --> 01:27:17,016
Jeff Olmstead: So the short answer is, from what we've discussed today, we can get you an extract to get you the core objects. We can also get you the core metadata, you know, like the CT, MRI. I can't really get you aliases because we don't have a table. For example, open MRI and closed MRI in block imaging's world all fall into. There are some other things which are always up for debate. Is a table under the C arm, or is it a standalone table?

323
01:27:17,136 --> 01:27:35,996
Jeff Olmstead: Now, blocks made some of those decisions, et cetera. The point being, you can get what the block hierarchy is. You might find that's the gold standard, because guess what, block's building the system. Or Steve might say, you know what, I know we've done this, but across the ecosystem, this is really what I see happening. You'll have to play with that.

324
01:27:38,126 --> 01:28:08,540
Nathan Bedford: Great, that's good. I don't think, I think from the object layout perspective, and I don't feel like there's a big gap we have, and I'm glad you'll get us that list. It feels like all the small things that I'm thinking about we'll find as we go building out the internal pages too, so. Okay, excellent. The next set of questions I want to ask, to just pick your guys' brain on the different ways we can integrate with Salesforce. So I know some of the options that are available, but do we have any outstanding things we need.

325
01:28:08,540 --> 01:28:11,140
Nathan Bedford: to wrap up before we move on? Do you guys feel good about this? Yes, Carlos.

326
01:28:11,480 --> 01:28:21,790
Karlous Malcolm: Can I say we not think about how to integrate with Salesforce, just not make Salesforce like a word when it comes to integration, personally. 

327
01:28:22,250 --> 01:28:52,240
Nathan Bedford: So let me be specific. I would agree that the tool itself is going to have an API that's going to be a REST API. We know we will have to build something that integrates with Salesforce. We, meaning between us, this group right now, somehow data will flow between the two systems. And so that's me just understanding what is available. And I would say this is part of the integration layer, not the core API layer. That's why I'm asking the questions. But you're right in that the tool will be the service. Sourcing Window v3 will not know about Salesforce. It'll just have APIs that integrate with something.

328
01:28:53,420 --> 01:29:03,252
Nathan Bedford: But then I'm kind of, the way my brain at least likes to work is I like to know what those some things could be. In this case, since we... We'll have to be integrating with Salesforce for this project. Does that make sense. 

329
01:29:04,632 --> 01:29:35,562
Karlous Malcolm: Yeah, it does to my head. It's like Salesforce can press the API. So it's like, that's it. It's not just like thinking about Salesforce because it's limited for whatever reason and not tanking me on it. You can only do flat file or something, right? Exchange and gem. So I'm very clear. I'm not a Salesforce developer. But that's where my mind goes first. I know for a fact that you consume API, so just go from that regard and not do anything. In other words, it's not that, like, oh, Salesforce has limitations.

330
01:29:36,552 --> 01:29:38,372
Karlous Malcolm: You know, we could develop whatever.

331
01:29:39,142 --> 01:29:41,622
Nathan Bedford: So if I'm wrong, interrupt me, Jeff. Go ahead, Jeff.

332
01:29:41,682 --> 01:30:01,664
Jeff Olmstead: The only question that I have is, are you proposing a temporary API because we're not yet building a polished one later? That's, I guess, the question in my head. Otherwise, if we're already going to build a polished one, the one that all vendors are going to use and all customers have the potential to use, then we can look at consuming. that one, so I'll let you clarify that.

333
01:30:01,824 --> 01:30:33,924
Nathan Bedford: Yeah, no, my thought is we're not building out the temporary one, we're building out the full final version, it just might be less full-featured, but I'm not trying to do an interim step. It's probably more me aligning, or me asking you, Jeff, as a Salesforce expert, what does Salesforce have as good options for, like, let's say, real-time versus batch data processing? You know, is it streaming, is it webhooks? Like, what are the different ways that, you know, I'm getting a little more technical, instead of just being high-level, saying, like, yes, we have APIs, but if we want real-time, you know, what's available. 

334
01:30:35,064 --> 01:30:44,724
Jeff Olmstead: The only one that majorly they don't have without introducing another server, which we've already come up with is, they don't let you consume platform events.

335
01:30:45,504 --> 01:30:45,904
Nathan Bedford: Okay.

336
01:30:46,004 --> 01:30:47,264
Jeff Olmstead: What's a generic term for this. 

337
01:30:48,304 --> 01:30:52,824
Nathan Bedford: Like, you're talking like infrastructure log-in-like type stuff, or what. 

338
01:30:53,004 --> 01:31:24,056
Jeff Olmstead: You get the technical lie while I speak here. So event-driven architecture is a beautiful thing, right? You know, transaction happened, just bubble up the event, and then the other end will call the API to get it. That is common. So I think the all-parts API is event-driven. The way to pull it off, of course, is you have to have an Azure instance or some kind of instance that CometD is actually the architectural pattern used in Salesforce platform events. And you could.

339
01:31:24,056 --> 01:31:54,906
Jeff Olmstead: subscribe to that as an outsider. But another wonderful goodness, and Carlos, this is another reason we're going to take our pitchforks against Salesforce. You can't consume a platform event inside Salesforce. They don't have any active listener. Don't ask me why. You have to have another box, literally a functional server that does nothing other than, oh, an event happened, call Salesforce and just pass it through. This is where I go with Carlos. I wouldn't necessarily design around the.

340
01:31:54,906 --> 01:32:28,980
Jeff Olmstead: limitations of Salesforce on that one. If it's like, you know what, events are here to stay, get over it, Salesforce. You just do that. Because the alternative to that is you are constantly calling back in to – you can't do it. You can't design an API that calls all these different endpoints. We either at the Salesforce 360 level have to do polling where we just check in every 10 minutes, which is really dumb, or we have to have the ability to support defense, which means we get an Azure AWS server that just sits there.

341
01:32:29,140 --> 01:32:35,420
Jeff Olmstead: Yep, okay. And then it will actually do a real data poll instead of polling to just see if there's information.

342
01:32:35,840 --> 01:32:36,100
Karlous Malcolm: Got that.

343
01:32:36,720 --> 01:33:00,292
Jeff Olmstead: Outside that, REST APIs, fine. The concept of webhooks, we emulate them. Salesforce, once again, doesn't have anything architectured. I messed around with Twilio. We did fake webhooks, and it's fine. It can be pulled off. The one that they really don't support inside the box is events, comment D, if you will, which is a very industry standard event. architecture.

344
01:33:00,772 --> 01:33:09,712
Nathan Bedford: Yeah. I'm asking this just so I can think about architecturally what, like, a question about real-time bidirectional things came up pretty early on, and, you know, how close to that can we get. 

345
01:33:10,292 --> 01:33:27,232
Jeff Olmstead: I love real-time. I think batching creates a lot of confusion. Real-time with retries would be my preference with APIs, and then REST architecture. Oh, I got a heart! Yes, more or less. I know I set you off with that earlier one, but...

346
01:33:27,232 --> 01:33:49,692
Nathan Bedford: Well, you did it with a straight face, though. That was impressive. Okay. That's cool. I think we're all aligned with building the tool out very agnostically. I'm thinking about this specific connection layer so that I know what is possible and what's not. Like, big difference if we can support close to real-time versus if we have to, you know, for one reason or another, go with, like, hourly syncs, which I would prefer not to have, obviously.

347
01:33:50,652 --> 01:34:06,304
Jeff Olmstead: Correct. Salesforce connectivity-wise, any of the, well, and that's even interesting to me, there is nothing... your tool that would be called, if done right, your tool doesn't actually call Salesforce.

348
01:34:07,374 --> 01:34:09,114
Nathan Bedford: Not directly, but yeah.

349
01:34:09,234 --> 01:34:11,814
Jeff Olmstead: You won't want it to, otherwise you can't scale it for other people.

350
01:34:11,834 --> 01:34:13,054
Nathan Bedford: Right, right, yeah.

351
01:34:13,494 --> 01:34:20,754
Jeff Olmstead: So your tool is bubbling up events that then Salesforce, as the consumer, is listening to.

352
01:34:20,954 --> 01:34:21,694
Nathan Bedford: Correct, yeah.

353
01:34:21,754 --> 01:34:33,684
Jeff Olmstead: Now, presumably your tool would also eventually allow pushes, where block imaging says, I want this part, pushes into your system, but after that it's a venture of an architecture.

354
01:34:34,884 --> 01:35:08,336
Nathan Bedford: Yep, that's right. To be very tactical about this, it's going to be important to me that we have our own parts table in our database for this, for speed. But we know that the parts source will be an inventory inside of Salesforce. So when parts are added or updated, we're going to have to work through the data flows to make sure we know how to, you know, is there going to be a conflict problem? Could somebody go and update the parts? Or something or another in both systems? we'll get that part aside but like for now it just means when parts are added in Salesforce I want to know about that as soon as possible so that we can.

355
01:35:08,336 --> 01:35:15,496
Nathan Bedford: update you know we can make that part available and if a customer of sourcing window adds a part you know through a request you want to get that to.

356
01:35:15,496 --> 01:35:50,626
Jeff Olmstead: Salesforce as quick as possible yeah yeah which now so this would be the interesting thing that would be the one potential place you can make an argument I don't really need a bubble event because my backbone is known it's Salesforce 360 it's not all parts or someone else so that's probably and that would be outside the public API yeah that's not a correctly accessible API this isn't known we know we have a special relationship with block we're actually pushing to them and telling them now whether that's needed or you.

357
01:35:50,626 --> 01:35:53,146
Jeff Olmstead: stick with the events architecture I don't know Carlos your thoughts on some.

358
01:35:53,146 --> 01:36:25,200
Karlous Malcolm: of this for me personally is on someone that's. consume a lot. I guess what I see where you guys are going is that, you know, you'd be kind of notifying of events, and then for people to kind of push stuff to you, more so, a lot more posting than you're sending stuff, because now you have to think, especially, because this is going to be awesome, but everyone's going to want this thing, right? Now you have to what, have effectively some kind of development constantly going.

359
01:36:25,200 --> 01:36:55,770
Karlous Malcolm: for them to be able to kind of work with other people's APIs, just saying, hey, here's our thing to consume, i.e. something occurs, here's our, JSON that we're going to provide to you, you can let us know an endpoint for that to kind of notify them, some kind of one-type thing, or of course it would be awesome to maybe include in the body, although I'm not a fan of that, because sometimes people don't care about the event, and they just waste a bunch of overhead, but, you know, say, hey, this event occurred, but even with the parts thing, right, if we added a part, whatever, or you did so, it may be more so.

360
01:36:55,770 --> 01:36:59,050
Karlous Malcolm: a lot of notifications, but people need to kind of really come to you.

361
01:36:59,250 --> 01:37:03,552
Nathan Bedford: Yeah. No, I think you're right. I think you're right, yeah. Like, this, just to be clear, this...

362
01:37:03,552 --> 01:37:04,752
Karlous Malcolm: And again, this is our last part.

363
01:37:04,972 --> 01:37:05,152
Nathan Bedford: Yep.

364
01:37:05,152 --> 01:37:12,752
Karlous Malcolm: Even if Salesforce can do something natively, because regardless of the other side consistently, we just need to create middleware and then handle that.

365
01:37:12,832 --> 01:37:13,672
Nathan Bedford: Yes, that's really it, exactly.

366
01:37:13,752 --> 01:37:14,532
Karlous Malcolm: It would be my opinion.

367
01:37:14,792 --> 01:37:46,932
Nathan Bedford: No, I totally agree. Like, we all have a published, documented API, so that everybody knows what's out there and what they can use. And then it's up to everybody's job to make those middlewares to connect to it. And that could be part of a service that Block offers to new vendors, right? Like, that could be, hey, we'll help build this middleware. But, yeah, we're 100% out of the business of making custom things inside of the platform, and all that's handled through middleware, 100%. And to your point, Carlos, maybe that is, like, the real-time nature. Maybe we lean into quick events with a robust API for pulling the full object.

368
01:37:47,012 --> 01:38:02,744
Nathan Bedford: That's a pretty common pattern. So that those events aren't heavy. I'm down for that. I think that's... Knowing... Sounds like what I'm at least hearing abstractly is high-level. Salesforce can definitely handle, you know... We can plan on being able to... synchronized within seconds, not minutes and hours.

369
01:38:03,284 --> 01:38:04,044
Nathan Bedford: Perfect, okay.

370
01:38:04,144 --> 01:38:17,084
Nathan Bedford: And the scale, rate limiting is not gonna be a problem. I don't know what kind of, I mean, we don't really honestly deal with high rates of data at this point. We might eventually have Biomed, right, but right now it's very low numbers of records, basically, per second, okay.

371
01:38:17,164 --> 01:38:27,234
Steve Muniak: Yes, higher rates are relative. Biomed, 5,000 transactions, $5,000 line items a month, initially would be extraordinarily high.

372
01:38:27,434 --> 01:38:28,454
Nathan Bedford: Wow, that's so low.

373
01:38:28,914 --> 01:38:34,934
Steve Muniak: Yeah, it's not hundreds of thousands of orders that'll be flowing through Biomed channel. Cool, okay, good.

374
01:38:35,414 --> 01:38:37,554
Karlous Malcolm: Yeah, it's gonna become global.

375
01:38:38,744 --> 01:38:42,764
Nathan Bedford: Yeah, I mean, the truth is, eventually it'll be a fun problem to scale this thing up to these.

376
01:38:43,504 --> 01:38:47,344
Steve Muniak: Their watermark on their proposal was everything is, all of this is scalable, so.

377
01:38:47,544 --> 01:39:13,326
Nathan Bedford: Yeah, I mean, that's the stack we chose. Yeah, we've had to deal with millions of requests, per hour, so it's definitely a space we can get to, but we have the privilege right now of having high revenue. High revenue for a low. user base, which is huge. Which is great. So we can scale up into that. Everything we're picking is meant to be scalable pretty highly. Although I would say, yeah, we deal with those scaling problems as we grow, obviously. Okay. So just to.

378
01:39:13,326 --> 01:39:42,296
Jeff Olmstead: close out the gap on the Salesforce side, if you stay webhooks and API consumption, we don't need a middle box. If you embrace event architecture, which this is kind of a call on your team, like, it's a great architecture. I'm not against it. I'm against Salesforce not supporting it. So we would have to put middleware in outside of Salesforce to basically pass it to the webhook, which would then do the same exact thing anyway. So that's just closing that gap on Salesforce.

379
01:39:42,296 --> 01:40:09,980
Nathan Bedford: limitations. I think since you guys would obviously be the first client of the API, we'll build this out together. I'll propose an architecture. We'll talk about it. I build both ways. I'm sure you guys have too. So we can think about, you know, what's simple to understand, but scales well. Like, we want to build something. I mean, we've all used APIs before. Like, if you use, you know, Stripe before, like, good APIs, we like using good APIs. I want, like, a good DX, a good developer experience for this too. So even if it's just us as developers that are using it.

380
01:40:10,700 --> 01:40:18,940
Jeff Olmstead: So the only question I will ask on the follow-up, the public API, which handles everything from the buying and selling and shipping and tracking number of parts.

381
01:40:19,140 --> 01:40:19,380
Nathan Bedford: Yep.

382
01:40:19,780 --> 01:40:23,960
Jeff Olmstead: There is a special relationship, which will be outside of the public API.

383
01:40:24,160 --> 01:40:24,420
Nathan Bedford: Right.

384
01:40:24,580 --> 01:40:32,240
Jeff Olmstead: In other words, you're not going to call webhooks every time block image, or you get a new part, and other vendors get to consume that webhook. Correct. That's unique to block.

385
01:40:32,360 --> 01:40:32,580
Nathan Bedford: Correct.

386
01:40:32,880 --> 01:40:39,540
Jeff Olmstead: Like, block, you might want to add this material. It's up to you. You can do whatever you want. We're just letting you know there was a new material, new part number that was added.

387
01:40:39,720 --> 01:40:39,980
Nathan Bedford: Yep.

388
01:40:40,740 --> 01:40:44,790
Jeff Olmstead: Or block imaging on the opposite side says, we had a new material.

389
01:40:45,170 --> 01:40:45,530
Nathan Bedford: Yes.

390
01:40:45,550 --> 01:40:49,530
Jeff Olmstead: Hey, SWP 3.0, you might want that. Like, this is a unique relationship. Yes.

391
01:40:49,530 --> 01:40:51,950
Nathan Bedford: If you own the platform, you get special APIs. Yep.

392
01:40:52,130 --> 01:41:03,062
Jeff Olmstead: Yes. My preference still would be, I think the head of IT would also be happy with me for saying this. My preference would be not that you store the credentials back into Salesforce.

393
01:41:04,282 --> 01:41:04,902
Nathan Bedford: Login credentials. 

394
01:41:04,982 --> 01:41:24,772
Jeff Olmstead: In other words, it's a one-way street. You can hit the public webhook saying, hey, there's something here, and then block Salesforce instance will call out to get it and bring it back. But that way you don't have to store OAuth credentials for the Salesforce 360 org. I know that always makes IT have second looks.

395
01:41:25,112 --> 01:41:33,192
Nathan Bedford: No, no, you're totally right. We're really building this with the intention of if this had to be sold, let's have as few hooks as possible to two blocks right now.

396
01:41:33,372 --> 01:41:49,052
Karlous Malcolm: I'm sorry, that concept of the stuff that you gave about, oh, we added new material, block has some kind of special thing to notify, if I heard you correctly. To me, that won't be block specific because other vendors eventually have the same.

397
01:41:49,292 --> 01:41:58,452
Nathan Bedford: Well, some things, some data, yeah, whatever, there's going to be, we know the block as the platform owner will have a special relationship with the platform. And whatever that exact is going to look like.

398
01:41:58,492 --> 01:41:59,992
Karlous Malcolm: So in that particular example. Yeah.

399
01:42:00,064 --> 01:42:00,444
Nathan Bedford: Yeah, okay.

400
01:42:00,644 --> 01:42:07,254
Karlous Malcolm: Must be that there's not, but rather that that can be an example of inspection.

401
01:42:07,614 --> 01:42:36,644
Nathan Bedford: And I think that's where we, yeah, that's where we let the business decide what is private data that shouldn't be shared versus what should. Because I know you were saying, Steve, that part source, right, like their list of private parts, is part of their proprietary secret jobs. So we'll build it, but to your point, yeah, Carlos, I don't know what is and isn't secret. We just know there'll be some things that only Block will get access to because they're the platform owner. This might have been a, I don't know if the example's good or not, but some things will not be. Okay, good, good.

402
01:42:37,364 --> 01:42:49,094
Steve Muniak: I just got a very tangential question. And it goes back to something as simple as, check a fact or check a part number in, say, chat, right. 

403
01:42:49,354 --> 01:42:49,774
Speaker 9: Yep.

404
01:42:50,274 --> 01:42:58,584
Steve Muniak: Would it, as it's going and looking at the LLM, will it also go out and look at, like a part source search button. 

405
01:43:00,986 --> 01:43:02,826
Nathan Bedford: To me, this is where we get into legal questions.

406
01:43:03,486 --> 01:43:08,006
Steve Muniak: I'm curious about what is existing today. Are they going to that level. 

407
01:43:08,186 --> 01:43:08,526
Nathan Bedford: Sure.

408
01:43:08,886 --> 01:43:09,986
Steve Muniak: And querying. 

409
01:43:11,566 --> 01:43:12,966
Nathan Bedford: As in what exists in V2, you're saying. 

410
01:43:13,226 --> 01:43:17,446
Jake Herwaldt: No, I'm just saying. I would say it's not doing that.

411
01:43:17,806 --> 01:43:24,566
Nathan Bedford: I learned it's not doing that live, but they are stripping websites live. And I think they've fought some of those legal battles that you might not want to fight.

412
01:43:24,786 --> 01:43:26,806
Steve Muniak: Yeah, if you're going to lose to the New York Times.

413
01:43:27,186 --> 01:43:27,546
Nathan Bedford: Right.

414
01:43:29,406 --> 01:43:40,346
Steve Muniak: But I didn't know the level of interrogation they were going through, because it opens up a whole lot of things, including exposure on our end, because we have a public-facing website with car numbers.

415
01:43:40,726 --> 01:43:55,066
Nathan Bedford: Yes. No, that's a good question. I know that I heard that Anthropic specifically, ripped the contents of millions of books, but physically ripping the binders off and scanning them. So they're consuming as much data as they can get access to, but the copyright is where the challenge comes in.

416
01:43:55,226 --> 01:43:55,626
Steve Muniak: Right, agreed.

417
01:43:58,196 --> 01:44:09,700
Nathan Bedford: Okay. No, let's... Yeah, I do, because some of this is coming up on how we can get that definitive part list, and I think there's technical ways that then legal will have to weigh in on, because it'd be great to have all the right parts all standardized and all synced.

418
01:44:10,890 --> 01:44:15,850
Steve Muniak: I'm just looking at, you know, again, as a part number is added, just the validation of that part.

419
01:44:15,930 --> 01:44:50,700
Nathan Bedford: Yeah, yeah, for sure. Man, yeah, I have a lot of thoughts around how I want to do that, how we could do that, because I think having clean part data is a differentiator. It certainly saves you guys time, but it would probably differentiate you from competition, too. All right. So on the integration, this doesn't have to be a long one, but I'm just making sure I understand what's possible from a, if we wanted to put, let's say, I think Mark was using the term widgets, but, like, if there was a desire, which has come up in the past in conversations, to put, let's say, embed sourcing Windows V3 into Salesforce.

420
01:44:50,820 --> 01:45:06,622
Nathan Bedford: Again, I'm not saying we should. In fact, I would want to hear your opinion on this, Jeff. But if people are like, I like being inside of Salesforce, but I want to see the new experience in it, is that a relatively... easy process to do let's say i between iframe and you know javascript running that's embedding its.

421
01:45:06,622 --> 01:45:38,142
Jeff Olmstead: own little thing you can to a certain extent um they they support something called canvas which would be the better experience because then you can actually log them in just based on their salesforce identifier think of it like a federation id got it so salesforce says you are so and so that aligns with the federation id we have for that user congratulations now you don't have to log in or anything like um so there is one level up which would be a little bit better.

422
01:45:38,642 --> 01:45:46,632
Jeff Olmstead: but uh iframes are possible we can allow it to get through yeah there would be some pathways okay.

423
01:45:46,632 --> 01:46:09,364
Nathan Bedford: we we are really pitching for not doing that um eventually let's say because it's a chance to you know to get that unified solution but if this is especially thinking about how maybe vendors want, Parts or all of the tool embedded in their system and their experience, and that'll be a separate conversation with whatever those ERPs or those systems are, but at least inside of Salesforce, we have some options. Okay.

424
01:46:10,154 --> 01:46:21,434
Jeff Olmstead: I could truly imagine a widget mentality where you're sitting on the sidebar of something and it just has a couple simple inputs, part number.

425
01:46:21,994 --> 01:46:22,374
Nathan Bedford: Yeah.

426
01:46:22,934 --> 01:46:37,594
Jeff Olmstead: You know, to have the full-blown experience, maybe not. I think your power users are going to be like, this is ridiculous. But if you have people who are engineers and they, as far as they know, I don't know, I just bought my part number in this little form. I don't really know how it works. I could definitely see the widget mentality.

427
01:46:38,014 --> 01:46:40,414
Nathan Bedford: Okay. Cool. That's good. That's a range of options.

428
01:46:40,914 --> 01:46:56,054
Steve Muniak: Widget mentality could be really powerful, especially if we, and I know there's some conflicts with the current business flow that you guys have been working on, but taking that widget mentality onto their cell phone also when they're laying underneath the machine. Yep.

429
01:46:57,804 --> 01:46:59,784
Nathan Bedford: Okay. Good. I'm sure we'll get.

430
01:47:00,096 --> 01:47:30,176
Jeff Olmstead: more deep discussions on that too. Okay looking through my list here. I'll close out that thought too because it will add value to it. The question becomes is it the onus of the API consumer to implement that themselves? In other words, Steve might come to me and be like dude can we just have this little form that pushes right to their API or is it part of this platform that says well we pre-baked some of these widgets that you can embed in your different platforms. That's part of the long-term strategy. Yeah.

431
01:47:32,216 --> 01:48:03,600
Nathan Bedford: Agreed. There's different value. I've built kind of standalone like web components like universal web components before when I was at Spectrum and that's yeah then you can have this thing that you can embed however you want. It becomes a business question of do we see enough systems out there that it's worth building your own adapters for or do we say here's the raw web component and have your engineers build it whatever they want. Perfect. That would actually be a really fun problem to get to if we get to that. I've always wanted to build a production, like a very easy-to-use web component system,

432
01:48:04,040 --> 01:48:34,690
Nathan Bedford: and I got this close to doing it at Spectrum, but then I got shot down at the end. Okay. So we've covered integration really well. I think we've got a lot of good discussions coming up around that in the future. It seems to me like a lot of how the integrations are going to happen will be predicated on what experience is going to be in Salesforce versus not, so that'll be the first discussion. But nothing that we're planning, it sounds like it's impossible, which is great. Great. Data migration. Eventually, if we do want to migrate data from Salesforce to what we've got,

433
01:48:34,770 --> 01:48:42,270
Nathan Bedford: I assume it's relatively easy to pull objects and records and get those into standard formats, CSV, JSON, whatever. Is that, yeah. 

434
01:48:42,390 --> 01:48:45,130
Jeff Olmstead: CSV and Excel are real easy.

435
01:48:46,790 --> 01:48:47,850
Nathan Bedford: Cool. That's fine.

436
01:48:47,970 --> 01:48:51,330
Jeff Olmstead: I would say that'd be that you'd have to post-convert it if you wanted to JSON.

437
01:48:51,590 --> 01:49:22,692
Nathan Bedford: No problem. We can do that. Cloud Code is very good at doing that kind of stuff. I did that yesterday. Okay. Excellent. And then, yeah, you brought up a good point about the embedding with authentication. We are working – the plan will be – I've used a couple different, like, let's say Auth0-style Auth tools. Probably won't be Auth0, but we'll definitely use a quality enterprise-grade Auth solution for all the stuff. That should make it easy for that SSO experience as well if we did the embedding.

438
01:49:23,732 --> 01:49:25,352
Nathan Bedford: Yep. So that's great.

439
01:49:26,842 --> 01:49:32,542
Jeff Olmstead: Are they shooting for – I know Block would love it. I haven't heard. Are they shooting for users to have single sign-on. 

440
01:49:32,702 --> 01:49:52,962
Nathan Bedford: That's a post-MVP Plus goal, but, yeah, absolutely. Yep. And, in fact, I think it would be pretty easy for that to be an MVP Plus for Block to start with if that's what you want. It's really – the solutions we're using, you know, you can imagine, make that – it's like almost a self-service level of ease going forward. I'm looking at, yeah, a couple different tools with that.

441
01:49:53,082 --> 01:49:56,182
Steve Muniak: If we're moving sourcing externally, they have to be a requirement. Yeah.

442
01:49:57,542 --> 01:50:06,294
Nathan Bedford: So when you say that right there – have to be your apartment. Single sign-in specifically would be like, one of your vendors has their own...

443
01:50:06,294 --> 01:50:06,634
Jake Herwaldt: Four block.

444
01:50:07,554 --> 01:50:07,774
Nathan Bedford: Okay.

445
01:50:07,814 --> 01:50:09,754
Jake Herwaldt: If we move the internal person.

446
01:50:09,754 --> 01:50:16,494
Nathan Bedford: externally instantly. Because right now the use of signing in through... With that in... Is Salesforce an IDP. 

447
01:50:18,454 --> 01:50:20,054
Jeff Olmstead: Hold on. Too many acronyms.

448
01:50:20,414 --> 01:50:21,574
Nathan Bedford: And then the provider...

449
01:50:21,574 --> 01:50:22,474
Jeff Olmstead: Just expand that one out.

450
01:50:22,474 --> 01:50:30,254
Nathan Bedford: Yeah, can you... Could I... So like right now if I wanted to log in as a mic with my Microsoft account, Microsoft's an IDP. 

451
01:50:30,474 --> 01:50:36,134
Jeff Olmstead: Yes. They use... So use a single sign-in with Azure right now as the back end. Okay.

452
01:50:37,194 --> 01:50:37,994
Karlous Malcolm: No, Jeff.

453
01:50:38,214 --> 01:50:38,534
Nathan Bedford: No. 

454
01:50:38,534 --> 01:50:44,724
Karlous Malcolm: Okay. That's a Salesforce... No, yes, it's Salesforce as an IDP, right. 

455
01:50:44,804 --> 01:50:51,264
Nathan Bedford: But you're probably... That's what I asked, but Jeff is probably going a step beyond, which is you're using Microsoft as your IDP to log into Salesforce.

456
01:50:51,684 --> 01:50:52,384
Jeff Olmstead: We are.

457
01:50:52,684 --> 01:50:53,024
Nathan Bedford: Got it.

458
01:50:53,184 --> 01:50:55,484
Jeff Olmstead: You can allow... No, I know where you're coming from.

459
01:50:55,484 --> 01:50:56,844
Nathan Bedford: No need to. I like what you said better.

460
01:50:56,844 --> 01:51:01,416
Jeff Olmstead: Salesforce does allow, you to use... They use it as an IDP.

461
01:51:01,456 --> 01:51:04,176
Nathan Bedford: You answered my question there. Yeah, the reason my question was that.

462
01:51:04,396 --> 01:51:05,976
Jeff Olmstead: They've always used Azure as the primary.

463
01:51:06,236 --> 01:51:13,576
Nathan Bedford: Perfect, yeah, yeah. That's what I was really getting at, was then you would, so what Steve was saying is you'd want to use Microsoft to log into the new tool if it was being installed.

464
01:51:13,696 --> 01:51:13,756
Speaker 9: Yeah.

465
01:51:14,096 --> 01:51:45,906
Nathan Bedford: Okay, perfect. That's good, yeah, that's pretty easy with any of the tools we're looking at. Okay. Excellent, so data sync, we'll have more, we'll have plenty of follow-up on, really, a lot of these main points. What do we got, time check, about an hour left. Thinking about how, as we build this out, we know that there will be some need to integrate with Salesforce, even in the next couple months. Is it relatively easy for us to,

466
01:51:45,986 --> 01:52:02,420
Nathan Bedford: I think you're working on getting us a sandbox at some point, or is that when you're kicking off? Yeah. Okay. So we'll get a sandbox instance. I'm not even sure exactly what elements we'll have to be hitting with that yet, but point of contact for, Anything related to Salesforce, would that be you, Jeff, at this point. 

467
01:52:02,880 --> 01:52:09,030
Jeff Olmstead: At this point, yeah. There's other in-house developers, but just keep it through me right now.

468
01:52:09,250 --> 01:52:09,590
Nathan Bedford: Okay.

469
01:52:10,430 --> 01:52:43,760
Jeff Olmstead: I mean, if you're going down the arena of the way there's a declarative tool, which allows you to consume endpoints that are REST compatible. I personally don't know that we would touch it, but there is one. And then that opens it up to things like Flow Builder, et cetera, where you can consume it. Now, I personally think we'll end up going straight Apex, which is the coding language, programmatic declarations.

470
01:52:45,720 --> 01:52:58,950
Jeff Olmstead: They do not have drag and drop. It is nothing close to drag and drop, unfortunately. So it's very much coding up the Apex, putting up the endpoint. This is what I want to have happen when it happens. So if you're going to bridge them.

471
01:52:59,350 --> 01:52:59,750
Nathan Bedford: Okay.

472
01:53:00,032 --> 01:53:03,892
Jeff Olmstead: There's going to be 8-packs, which also means there's going to be unit tests and stuff like that that would have to be written around.

473
01:53:04,732 --> 01:53:18,852
Nathan Bedford: Okay, cool. Yeah, speaking of that, so I don't know much about Gearset, but I think when I looked at it, we used similar things in our space. Is Gearset, have you guys got automation and unit testing, or what does Gearset do. 

474
01:53:19,272 --> 01:53:56,752
Jeff Olmstead: Sure. Gearset predominantly focuses on migrating data between orgs, so sandbox to production. Now, the new pipeline that's in place is 100%. Git has the backbone, so this is, I want to say, in place as of about a week and a half ago. I think literally everyone and every external vendor is now working on the same Git repo, so the Git repo is the source of truth. And the pathway that looks like there is developer box, which would be something you're talking about. You push into an integration branch, and then Gearset kicks in, takes your changes, pushes them into the box, or reports back failures.

475
01:53:57,012 --> 01:54:17,354
Jeff Olmstead: So Gearset is the bridge tool between. Git. and Salesforce. So it goes to integration products, then it goes to a test box, and then it goes to a release box, and then onto production. And Gearseth, as developers, we just do commits right into the Git repo. Yeah, you know. Cool. You can log into the port, but the code is now the source of truth.

476
01:54:17,554 --> 01:54:20,654
Nathan Bedford: Awesome, okay. All right.

477
01:54:20,794 --> 01:54:28,074
Steve Muniak: So in essence, we've got now a staging box as opposed to just sandboxing production.

478
01:54:28,454 --> 01:54:40,984
Jeff Olmstead: Yeah, yeah. We have three boxes right now where it used to be just one, which of course, it's a transition. But yeah, it's been live about a week and a half now. Okay, and you get the multi-branching just down on the developer side.

479
01:54:41,064 --> 01:54:42,944
Nathan Bedford: Yep. And so.

480
01:54:43,044 --> 01:54:44,764
Jeff Olmstead: Yeah, it's beautiful going forward.

481
01:54:44,844 --> 01:54:45,344
Nathan Bedford: Yeah, it is.

482
01:54:45,704 --> 01:54:48,924
Jeff Olmstead: Catching up takes a bit, but everyone's up out there.

483
01:54:49,714 --> 01:54:52,174
Nathan Bedford: So that means we will probably be using a shared environment.

484
01:54:53,914 --> 01:55:03,016
Jeff Olmstead: Yes. If you're touching anything in Salesforce coding, well, either way, I suspect. Whatever you're building, Block Imaging will have connected to their GitHub repo.

485
01:55:03,336 --> 01:55:04,076
Nathan Bedford: Yeah, they are.

486
01:55:04,236 --> 01:55:34,596
Jeff Olmstead: Okay, so you're going to get a .ext at Block Imaging email address, which then you log in with a single sign-in against the block org just like we do. You do your pull request or commit to all the Git branches. Now, there is a Salesforce repo, and I don't know the logistics on this, if they're expecting anyone on your team to do Salesforce work. I don't think so. Or if your team is purely doing the SWP 3.0 work, and then they touch base with like, all right, we need some, I see some nodding.

487
01:55:34,696 --> 01:55:42,096
Jeff Olmstead: We need someone over there in the Salesforce world to do a feature request, add in the REST API, push into the sandbox, and there are two sandboxes we'll talk.

488
01:55:42,276 --> 01:56:03,230
Nathan Bedford: Yep, that's right. That's, I think, what Mark's planning right now. I would say that's definitely the plan. Okay, so since there will be a shared environment, how do you guys keep your test data for these environments? I'm thinking about... If we had to build things around specific data entities, are they refreshed? On a regular basis, or what does that look like? Is it predictable in data. 

489
01:56:03,770 --> 01:56:34,590
Jeff Olmstead: That's been the biggest main point of the transition. We have one full copy sandbox, and that one is identical to production. In other words, like all 100,000 accounts, whatever it may be, it's identical. Then we have the edge development sandboxes, and we need literally to get to the month of October because we've got projects being released in September. But we have data seeding scripts, which just need to be made more robust. Perfect. That's just the catch-22 of this rapid changeover to Git.

490
01:56:35,150 --> 01:57:01,292
Jeff Olmstead: So right now, people are working in boxes with very limited data. Hopefully, we can get to a point where you are testing with full. That's where the users, subject matter experts, that's where they work anyways. And that's probably who you want to bridge with. So by the time you get to that box, it has verbatim equivalency with Git. whatever they're experiencing in production.

491
01:57:01,472 --> 01:57:04,812
Nathan Bedford: Perfect. Is that the environment, Steve, that you get us access to now. 

492
01:57:05,052 --> 01:57:05,292
Jeff Olmstead: Yeah.

493
01:57:05,392 --> 01:57:11,382
Nathan Bedford: OK, great. Is that something that, I mean, we're not in a rush right now, but any idea on the timeline on that. 

494
01:57:11,582 --> 01:57:12,522
Steve Muniak: It should be adjusted to two.

495
01:57:12,882 --> 01:57:21,822
Nathan Bedford: OK, great. Yeah, because that would be really helpful, being able to hop on and walk ourselves through the print process so we can come prepped with questions.

496
01:57:21,822 --> 01:57:29,022
Jeff Olmstead: That would be the one you want. You don't want any of the French boxes, because they might have 1,000 accounts. They're not even relevant to you.

497
01:57:29,382 --> 01:57:43,342
Nathan Bedford: All right, that's good. Excellent. I think from, I had questions about Convo Pro, for sure, going forward, but before we get to that, I feel like I've got what I was hoping to get out of so far.

498
01:57:43,902 --> 01:58:13,094
Jeff Olmstead: I have one more, if I can throw one in. I have two things right now, Convo Pro, and then this other one of team buy-in. And this is where I'm going. This was a conversation, Steve, I've had with you in the past. What is the corporate position, because this impacts what we, keep on as features inside Salesforce. Are teams internally allowed to manually source or source outside of the ecosystem when this thing goes live? We'll really need a heads up on that to try to manage that.

499
01:58:13,334 --> 01:58:30,994
Steve Muniak: I agree, because that's the culture of sourcing right now, right? You know, especially when it's all hands on deck over here in service. They're gonna run through all tiered vendors and if anybody's not getting fast enough, they're gonna just jive them with a phone call.

500
01:58:32,124 --> 01:58:32,584
Jeff Olmstead: Yes.

501
01:58:32,584 --> 01:58:35,204
Steve Muniak: And we've got to still be able to consolidate that process.

502
01:58:40,444 --> 01:58:47,174
Nathan Bedford: Does that get easier, do you think, if we, I mean, down the road, new tool? Is this more of a change. 

503
01:58:47,494 --> 01:58:49,734
Jake Herwaldt: It's a vendor slow, it's a vendor speed issue.

504
01:58:49,734 --> 01:58:59,694
Steve Muniak: It's a vendor speed issue, and it's also a criticality issue. And there's all kinds of reasons to go outside of the system, valid reasons to go outside of the system, though. Yeah.

505
01:59:00,096 --> 01:59:03,116
Nathan Bedford: Do they come back into the system? So they're still using Salesforce, but they're just not using Sourcing. 

506
01:59:03,156 --> 01:59:09,816
Steve Muniak: They're recording that request within Salesforce. Either at the time they're putting the request out or on the response.

507
01:59:09,976 --> 01:59:40,706
Nathan Bedford: Got it. So it's in the first half, but they have to do the second half, otherwise it's a transaction. Okay. No, that's good. Okay, outside of that, any other things we missed, questions? Because I'm really curious to hear more about ComboPro. And I think the things we just discussed will go into deep dives. We'll certainly set things up in the weeks ahead to go in deeper. But I know that even in the early requirement, like RFQ, there's going to be some integration with ComboPro. And I would love to know what it does and what's the integration look like. 

508
01:59:40,886 --> 02:00:13,820
Jeff Olmstead: Sure. And it's simplest. It's secure AI. That's Block's perspective on kind of what ComboPro is and provides to the table. At its most robust right now, it has applications that live in different environments. So we have Salesforce, of course, as our first primary focus on build-out. Okay. And we're referring to this as Convo Pro Automation. We also have Convo Pro Studio, which is a chat environment. That one is coming in the future. What that would be is more like your GPT interfaces,

509
02:00:14,240 --> 02:00:48,200
Jeff Olmstead: where it's like, oh, OK, I got the visual. I got the engagement on one single screen, et cetera. Automation right now is our big rollout. That is the one actually we're authorized with Block Imaging. We have clearance to deploy into their production org. That was fun. But Siemens has a lot of hoops. I'm not sure if you know that or not. But yeah, getting that in a position where that's authorized to now go into the system. So Convo Pro is not AI itself. It's the bridge to AI, securely. So currently, we're working with Claude, OpenAI, and Gemini.

510
02:00:48,200 --> 02:01:21,092
Jeff Olmstead: as the three primary stacks. And the system itself is agnostic. We're also moving into agent architecture, which is a term in the tech space probably makes sense to you. And so now, instead of being Siemens, It's single task based, it's also able to adapt. You can ask it six questions at a time and it'll dole out and consume the different tools. So as we're adding in tools on the AI stack, we're also checking the block, hey, can we use this web search tool? Is that good with your data policies? It's very conscious of where the data's going, what the retention period on it is, what the.

511
02:01:21,092 --> 02:01:55,392
Jeff Olmstead: deletion period and access and basically API consumption. That's Convo Pro today. Now it's agnostic in that there is a Convo Pro server. It just happens to have a Salesforce app and it was its primary build. We messed around with an Outlook build as well, so we can get Convo Pro with Outlook and Office 365, but on your specific end of things, this is now Convo Pro SDP 3.0. We got API endpoints, how can we consume them in the system? The major focus right now, though, we're doing with the automation side is we're taking,

512
02:01:56,562 --> 02:02:29,244
Jeff Olmstead: actually one of the projects that's being rolled right now, accounting department. gets invoices emailed all the time they have to do data extraction from these and all that wonderful stuff we have the process set up right now where the invoice will come into the system they'll come into Salesforce they'll get logged as a Salesforce email message attachments will be locked it'll then go through a process of identification this is part of the accounting department it will scan the documentation see if it's credit memo or a payable it will then from that back extract to look for any purchase orders to determine if this is linked up to one so they can create the payable with all the line entries all.

513
02:02:29,244 --> 02:02:59,944
Jeff Olmstead: extracted from the PDF and associated with the right company that's an example and if you actually ask me how much that's kind of a pro maybe 5% yep not to be dumb but at the end of the day the AI gets us over the hurdle yep of determining what the best lines are getting to extract the data and all this other stuff but then we're powering it with Salesforce flow automation and business logic all into a piece and Steve if you're wondering actually on the next step of this field service reports next queued up as soon as this one gets done because.

514
02:03:00,096 --> 02:03:34,896
Jeff Olmstead: Because there's a ton of those that come in every day that people have to extract data out of, manually transpose it into a Salesforce record to then... So the automation piece is super exciting because it's real time-saving. I suspect the automation piece would probably kick in, in the conversations we've had, customer uploads a PO. They're like, man, it'd be really handy to be able to extract some of this information and have it both digital and have the hard-recorded PO without having to have them double key it in. And that's a great, great example use case of using CommaPro with the AI.

515
02:03:35,296 --> 02:03:53,076
Nathan Bedford: Okay. So can I dig into that example real quick? Because we actually talked about this and thought about this one for a while. And so what I'm hearing from you is, let's say that we're building the product as an external tool. We would just have an API that we could basically use to securely call AI. That's how this would look on our side. Okay.

516
02:03:53,256 --> 02:04:23,260
Jeff Olmstead: Yep. You would pass over either a blob or a file. Okay. to push it back to combo pro you can pick your AI of choice in this particular one where you know with PDF attractions there's a couple Google Gemini does quite good open AI is pretty good too either way you end up getting a file store you ask your questions of it with your known schema that you want.

517
02:04:23,260 --> 02:04:54,620
Jeff Olmstead: back JSON you're like I'm expecting this out of this yeah and then after that you get your data back you want and you're responsible because this is not your box you're responsible to then map it into the appropriate fields yeah so that would be an example example use case other places that could be interesting too are so combo pro also supports rack which so for like block imaging we can have an arena where they're like hey we got the SharePoint list which has really.

518
02:04:54,620 --> 02:05:24,662
Jeff Olmstead: good engineering documentation or how to source part numbers or whatever you want that's a great use case, So we can get that tied into an Azure search instance, wire it up with RAG via ComboPro, have the natural chat agent to allow users to engage with it and not expose the behind-the-scenes protected content. Another great use case. ComboPro on its roadmap is also, actually ComboPro, the reason it initially had ComboPro is it's conversation as a platform.

519
02:05:24,802 --> 02:05:56,922
Jeff Olmstead: That's the overarching approach. It's basically saying, you know, EMA was really cool because it bridged the gap, but EMA also needed to go further. So things like ComboPro says, all right, let's bring in SMS, WhatsApp, Messenger, the conversational side of it, and have the AI component on it to allow cross-platform communication. So if you're in Salesforce or you're sitting over here in ServiceNow, we don't really care. You can communicate with each other through a medium and bridge the platform.

520
02:05:57,122 --> 02:06:16,814
Jeff Olmstead: Especially overseas and international, WhatsApp is big. It's just huge. So that's the next stage of Camel Pro, which that's been expressed in block imaging. Like, this is where we're headed. Yes, we're doing the AI piece. But there's a ton of times where they need to communicate internationally and have that conversation right within the Salesforce ecosystem. All right, that was a lot of words. What do you got. 

521
02:06:16,954 --> 02:06:17,494
Steve Muniak: No, that's good.

522
02:06:17,554 --> 02:06:28,494
Jeff Olmstead: Jeff, what is Service Pro? Service Now. That's the GE-owned one. Is that what you mean? Oh, I was just, it's not an internal system.

523
02:06:30,054 --> 02:06:34,094
Nathan Bedford: No, it's an official. So he's just asking what Service Now is as a product.

524
02:06:34,094 --> 02:06:36,974
Steve Muniak: Yeah, I thought you were mentioning an internal product.

525
02:06:37,314 --> 02:06:51,934
Jeff Olmstead: Oh, no, sorry. No, sorry. It would be like the equivalent of Microsoft Dynamics. So you'd have the Camel Pro for Dynamics app. You'd have the Camel Pro for Microsoft Office app. The ability to have the tools at the place where people are working.

526
02:06:52,174 --> 02:06:52,614
Speaker 9: All right.

527
02:06:52,614 --> 02:07:24,356
Jeff Olmstead: The major thing in Salesforce we're trying to get to is you can be in this system. Salesforce is. It may shock you. They want to have everything all consumed within Salesforce. I know that's shocking for anyone to hear. Companies have external systems. They might have Confluence. They might have SharePoint. They might have Dropbox. They just have stuff. And so the whole goal is to provide secure exchange between the stuff while not detracting people from where they're actually working.

528
02:07:24,536 --> 02:07:56,036
Jeff Olmstead: So you can send Salesforce. You can have your ComboPro chat utility bar. You can ask questions of stores that may not even be in Salesforce, or they may. You might ask knowledge articles. They may live in Salesforce, or they may live in SharePoint. That's the drive for conversation as a platform. It used to be data was the big driver. We're just convinced at this point people just want to have conversations and not really care where the data lives. Now, IT cares, and that needs to be secure. But the normal user is like, I just want to sit here and get stuff done.

529
02:07:56,936 --> 02:08:03,520
Steve Muniak: Going back to your initial example, so there are variants. built into the invoice approval so that could just push it through without.

530
02:08:03,520 --> 02:08:35,230
Jeff Olmstead: someone looking at it yes we have no house don't shake that we are able to push it through because of the fact that the person making the payable is the last eyes on it so that conversation has come up which is then I've asked that question like do you want this to be happen there's two models there's the automation has found the PO there's enough overlap on what they are that they actually match go ahead and make the payable and the payable lines because eventually you have the accounting department being the final.

531
02:08:35,230 --> 02:09:06,552
Jeff Olmstead: release mechanism so they have to look it over anyways yes now if it went to the next step and although transfer I think they'd give me a little bit extra like wait a minute okay hold on then there's the hey we've attracted as much as we can from this you're gonna walk through this flow because it got flagged as needing manual process so it had a high enough variance where it's like we can't quite get the whole way but we're gonna least assist you and at least you still won't have to keep stuff in you'll be able to, a helper to get you to that exit so that's kind of the model in general we see with anything ai.

532
02:09:07,032 --> 02:09:15,522
Jeff Olmstead: um it's an assistant tool like yeah you have to be able to flag when a human needs to get in the.

533
02:09:15,522 --> 02:09:20,862
Steve Muniak: middle i was looking more like you know we see invoices get hung up over a penny yeah push it.

534
02:09:20,862 --> 02:09:53,002
Nathan Bedford: through yeah oh so this is okay so then to me combo pro tell me if i'm wrong about this it's a platform you guys create that really you have elements that are bespoke for certain customers need because certain customers have specific workflows but it's a platform that has workflow automation mixed with um obviously with the studio like a secure end user chat conversation piece but like we could still use it to call a siemens approved way to do an ai like if we needed to call something ai based through our tool the proper way to do it would be through convo pro.

535
02:09:53,002 --> 02:10:23,184
Jeff Olmstead: okay yeah that's a that's a siemens approved channel to get access to ai is the best way to look at it especially from your perspective, But behind the scenes inside Salesforce, the flexibility of it is there are basically Lego blocks. I might have a file upload block. I might have a store creation block. I might have an SGPT block or just a whole bunch of these building blocks. But Salesforce has its own flow-based ecosystem. So there's nothing actually special in the Convo Pro application for a client.

536
02:10:23,744 --> 02:10:29,204
Jeff Olmstead: It's just we have all the building pieces we need to assemble a solution for a client.

537
02:10:29,204 --> 02:10:32,224
Nathan Bedford: So that's tools, data source, RAG, that's all the building blocks.

538
02:10:33,104 --> 02:10:37,204
Steve Muniak: What size Lego blocks? Are they Duplos or are they tiny little ones. 

539
02:10:37,834 --> 02:10:41,474
Jeff Olmstead: We had this conversation the other day. So they look cooler than the normal Salesforce ones.

540
02:10:41,994 --> 02:10:44,154
Nathan Bedford: We use that analogy, too. It's a good analogy.

541
02:10:44,454 --> 02:10:55,014
Steve Muniak: Well, his was wrong yesterday because he said that the Duplex, you really can't tell what they're built. The problem is he's not imagining scale. We can have a beautiful Empire State Building here that's 15 feet tall.

542
02:10:55,054 --> 02:11:01,136
Jake Herwaldt: You can build a Death Star if you wanted to. That is true. I was not convinced. You lost that.

543
02:11:01,276 --> 02:11:02,196
Steve Muniak: You lost me on that.

544
02:11:02,596 --> 02:11:32,806
Nathan Bedford: But that helps me know it's really a tool you guys are creating that you take advantage of Salesforce's, some of the features of Salesforce to bolt these pieces together to make that unique add-ons per client. So that's how you get RAG or tool calling or data sources all. Okay, and so just technically I'm kind of curious now, you're using the three that you said you used. Are you guys running those directly to like GCP and like Bedrock.

545
02:11:32,806 --> 02:11:37,406
Nathan Bedford: or Anthropic directly or OpenAI or through Azure? Like how are you sourcing those AI calls. 

546
02:11:38,676 --> 02:12:09,100
Jeff Olmstead: We're doing direct node-based environment. So we're doing direct calls to them via the API methodology. Now we are, when we're building agents, that's slightly different. So agents are more, let's say Block comes to us and says, oh man, we need to do some robust stuff. We have access. We have some capital. to Python servers that we spin up and kill instantaneously. So as you can imagine, that opens the doors. We need to do financial calculations. Well, guess what?

547
02:12:09,160 --> 02:12:10,540
Jeff Olmstead: AI really stinks at them.

548
02:12:10,740 --> 02:12:11,000
Nathan Bedford: Yeah.

549
02:12:11,080 --> 02:12:13,560
Jeff Olmstead: When you're using the user interface, that's not what they're doing.

550
02:12:13,720 --> 02:12:14,020
Nathan Bedford: Yeah.

551
02:12:14,060 --> 02:12:21,820
Jeff Olmstead: They're generating stuff to do these calculations, but it's not the AI itself that's answering. Yeah. We have the Python tooling.

552
02:12:22,440 --> 02:12:22,920
Nathan Bedford: Okay.

553
02:12:23,060 --> 02:12:33,940
Jeff Olmstead: So some stuff we're handling on. Kind of a problem. Some stuff we're handing off to the AI agent that can do it, the LLM, as Peter says, that can do it better.

554
02:12:34,120 --> 02:12:34,400
Nathan Bedford: Okay.

555
02:12:34,480 --> 02:12:37,940
Jeff Olmstead: But what we're doing to the end user is we're saying, don't worry about it.

556
02:12:38,260 --> 02:12:38,660
Nathan Bedford: Yeah.

557
02:12:39,360 --> 02:12:49,520
Jeff Olmstead: You know, we'll maintain the compatibility as the LLMs keep changing, but the customer has the ability to say, I don't want to use the interruption. That's fine. You don't have to.

558
02:12:49,620 --> 02:12:49,920
Speaker 9: Yeah.

559
02:12:49,980 --> 02:13:22,792
Jeff Olmstead: They know which ones are being accessed and accessible and they can block if they're like, well, our company policy only allows this particular one or, especially in the case of Siemens, who might, this in the future they might say we have our open ai compatible llm that you have to use totally fine we can consume that as well now from block's perspective we want to have enough test data to say we totally will consume that but can you at least prove it's passing the same level of testing that we have uh here because otherwise we're going to take a hit so there is some.

560
02:13:22,792 --> 02:13:47,212
Jeff Olmstead: interesting stuff when it comes down to uh if you might have already experienced it like you said if claude is amazing at code oh it's very precise yeah it's slow though yeah and so it's like blending these different llms we have conversations that will start on open ai nano yep hand off the cloud for some processes go back to gemini for its great image recognition and the front end user.

561
02:13:47,212 --> 02:14:01,564
Nathan Bedford: just has no idea yeah which is great no i like that and yeah you're right nano is insanely cheap and insanely fast i've been using it for like language translation or even simple image recognition and it's like yeah, crazy and fast okay, And then, yeah, with tools like...

562
02:14:01,564 --> 02:14:07,064
Jeff Olmstead: Mixing and matching behind the scenes so that the front-end user is getting a breadth of these.

563
02:14:07,324 --> 02:14:33,724
Nathan Bedford: Yeah, that's great. And things like Pydantic AI and the Glang chain make it really easy to build these agentic tools, too. So that's awesome. I'm realizing that, yeah, Combo Pro is a big deal, meaning it's a big effort from FMD that's a pretty... I think a lot of software agencies that have done service work realize, man, there's a time to build product right now that's pretty amazing. There's a whole new field of tools waiting to be built. So I'm glad you guys are doing that. That's really cool.

564
02:14:34,934 --> 02:14:48,974
Jeff Olmstead: And then, yeah, I like on a project like this, looking for places, and there's so many... You know, like the natural language. I can totally imagine a customer saying, can you... What's the status of this shipment? That's a great natural language drop-in.

565
02:14:49,114 --> 02:14:49,374
Speaker 9: Yeah.

566
02:14:49,514 --> 02:14:58,534
Jeff Olmstead: Okay, we can query the information. We can aggregate it into a JSON format. We can feed it to the LLM. We can get it back to natural language and get you the tracking number.

567
02:14:58,714 --> 02:14:59,054
Speaker 9: Yeah.

568
02:15:00,096 --> 02:15:30,796
Jeff Olmstead: I think the ability to add in chat-driven architecture. We actually, this was way back in the day, about a year ago, we had embedded in sourcing window at that point one, a chat agent, which was doing pretty decent. It didn't have any of the robust stuff that's come out in the last year. But you could do natural language, especially like, here's my tracking number, what's the status of update? Like just, you could technically request a, here's my part number, can you just put in the request? No form, just natural language.

569
02:15:31,776 --> 02:15:58,316
Jeff Olmstead: I can totally see that for field engineers, especially, they don't want a form. They're like, I have a GE part number. You know, you extract as much as you can and then only do a follow-up question if you're missing a gap on one more piece of data, all in a chat bubble instead of a form. So there's probably creative ways that we can envision, especially for, now, for power users, waste the time. Just give you one, they don't want the chat interface. They already know where to go.

570
02:15:58,396 --> 02:15:58,996
Nathan Bedford: They want the fast keyboard.

571
02:15:59,636 --> 02:15:59,916
Jeff Olmstead: Yeah.

572
02:16:00,000 --> 02:16:18,520
Nathan Bedford: Yeah, we're definitely exploring the idea of demoing, like, a voice agent for FSEs because that feels like that's a thing that wasn't even possible a couple years ago. I built a couple of them to see, man, they've grown quite a bit over the last four months, and I'm sure you've seen real-time. Like, it's getting good. It's getting good, and it's getting fast and cheap.

573
02:16:18,640 --> 02:16:18,880
Steve Muniak: Yep.

574
02:16:19,600 --> 02:16:20,120
Nathan Bedford: Very cool.

575
02:16:20,340 --> 02:16:27,520
Steve Muniak: Jeff, I'm always looking for ways to pay for this thing, and driving down Mitch's cost to me is a big, big opportunity.

576
02:16:30,420 --> 02:16:42,860
Nathan Bedford: Okay. This is cool. So, I think it sounds like we're all going to be looking for places to have AI help users at the right place, and we now have a pretty proven avenue to do that. And does that mean. 

577
02:16:42,860 --> 02:16:58,480
Jeff Olmstead: You have a pipe, exactly. I mean, it's even to say, like, your team, if you're like, oh, we can make an open AI, because even behind the scenes, we're adapting the schema to make sure if you say Gemini, it's like, you don't have to worry about it. Just use the open AI standard.

578
02:16:58,760 --> 02:16:59,120
Nathan Bedford: Yeah.

579
02:16:59,180 --> 02:17:07,132
Jeff Olmstead: It'll pass through. to Gemini, Claw, whatever. It just gives you a pipe. If you're like, boy, we could inject AI here, then we have the proof pipe from Block.

580
02:17:07,392 --> 02:17:39,092
Nathan Bedford: Yeah, that's perfect, that's perfect. Okay, that's great. That's definitely more than I thought it was. I thought maybe it was like a chat window on the side. This is quite a bit deeper than that. Very cool. All right, I think, looking at my notes, that was the last big point for me other than just kind of thinking about action items for the weeks and months ahead. I guess we're for that. We know you guys are busy. You guys have a lot of things going on in your world. Are there times over the next, let's say between now and February, that you know you guys are gonna be very slammed, and we should be planning ahead.

581
02:17:39,752 --> 02:17:47,572
Nathan Bedford: for availability of anything related to Salesforce? Or is there some dedicated, even if it's low hour availability, throughout the next several months here. 

582
02:17:49,692 --> 02:18:17,604
Jeff Olmstead: On the FMD side, the really big crunch is through end of September. Okay. Which is, there's a lot of stuff tied to the fiscal year of Siemens, which is end of September. September and so there's a lot of a lot of moving pieces to get wrapped up launched and closed out and then things get back to the busy normal which is still busy but at least uh the crunch if you will it's kind of removed so just kind of a heads up on that for September we're looking we're.

583
02:18:17,604 --> 02:18:24,494
Steve Muniak: looking forward to final development on version 2.0 right Jeff okay oh yeah actually there's only.

584
02:18:24,494 --> 02:18:56,764
Jeff Olmstead: one case left in that oh really do we have cloning is there is cloning done it is uh it is uh I actually think cloning is done the only case I was working on with uh actually here was they want the ability to key in uh multiple prices at the same entry which is like I got this one oh I want to add a second price without doing the clone thing behind the scenes it's related to cloning but yep yeah all right in one place our all parts.

585
02:18:56,964 --> 02:19:13,316
Jeff Olmstead: I'm just going to whip out the cudgel if the clothing wasn't done tomorrow, Yeah, I have this, I don't think that cloning case is the one they're referring to. So I think this is a new one to make it faster for them to put a couple prices in at the same time. Now that may be the one they're referring to, I'm not sure.

586
02:19:13,396 --> 02:19:18,316
Steve Muniak: You know what, that is it. It's because it's for tubes and things like that. Ah, yep. Okay.

587
02:19:18,896 --> 02:19:32,376
Nathan Bedford: This actually brings an interesting question, which is, is there an existing, and I know this is probably not the case, unlike a spec, a dock, all the features that have been and are being added, where is that living? Is it in brains and in your card somewhere right now. 

588
02:19:32,376 --> 02:19:35,476
Jeff Olmstead: You have such new pipe dreams.

589
02:19:35,696 --> 02:19:44,076
Nathan Bedford: I'm more saying, you just mentioned a feature that now we're going to have to build out. Like what else are these features that we don't know about that we'll have to build out? Where do they exist. 

590
02:19:45,456 --> 02:20:13,780
Jeff Olmstead: They do not exist in a document anywhere that I know of. The best documentation we have right now is around the notifications hub, which is what you've been shared. Inside the ecosystem, no. Just for history. kind of give you as to what I would say this third, there is a third party who built the framework when it was first launched with Salesforce. It's a big manipulation of Salesforce experience cloud to try to cram this in.

591
02:20:13,920 --> 02:20:14,320
Nathan Bedford: Okay.

592
02:20:14,620 --> 02:20:45,210
Jeff Olmstead: High tide 2020, I've told this to Jason many times, and Jason Salesforce 360 was a fantastic idea. It would have been smarter to keep this tool out, because it's been hard to cram it. Now, if you had done custom build and experience site, fine, totally fine. But where, so you have a mixture of a managed package, you have a mixture of custom code, which is some in Aura and some in LWC, two different programming languages, mixture of Apex. There is no single source of documentation.

593
02:20:46,630 --> 02:20:53,970
Jeff Olmstead: The only person you have probably is myself and Carlos. And honestly, Vicky knows, and Carlos is like, I don't want a part of it.

594
02:20:54,650 --> 02:20:56,550
Nathan Bedford: Don't put my name in that hat. Okay.

595
02:20:56,650 --> 02:20:59,670
Jeff Olmstead: That has a good handle on the history and what is today.

596
02:21:00,032 --> 02:21:16,952
Nathan Bedford: And generally, what we've seen is, like, the complexity is in some of the edge cases, but overall, like, we've all been a part of more complicated work, closing apps. So I'm content that we'll be able to build a rough outline and then, you know, map out all the hairy pieces, but I don't think it's insurmountable.

597
02:21:17,052 --> 02:21:20,912
Jeff Olmstead: For what it's worth, even within Salesforce, it wouldn't have to be that hard.

598
02:21:21,032 --> 02:21:21,652
Nathan Bedford: Okay, yeah.

599
02:21:21,652 --> 02:21:22,872
Jeff Olmstead: You're fighting tools all day long.

600
02:21:22,992 --> 02:21:23,252
Nathan Bedford: Got it.

601
02:21:23,572 --> 02:21:45,792
Jeff Olmstead: As a developer. I'm speaking as a developer here, not as a user. In other words, the process map isn't that bad. You want a part, you put it in, someone quotes it, you accept it, boom, you move on. It's the ability to integrate that into a Salesforce system without modifying the back-end team's workflow and the accounting team's workflow and all these other moving pieces.

602
02:21:45,912 --> 02:21:46,212
Karlous Malcolm: I got you.

603
02:21:46,352 --> 02:21:54,362
Jeff Olmstead: As well as the limitations. Like, I'm not writing raw JS script here. I'm trying to mesh it with two or three other packages.

604
02:21:55,262 --> 02:21:55,762
Karlous Malcolm: Got it.

605
02:21:55,922 --> 02:21:59,342
Jeff Olmstead: It will be a dream in your end to be like, you know, we've got a blank slate.

606
02:21:59,622 --> 02:21:59,922
Karlous Malcolm: Yeah.

607
02:22:00,064 --> 02:22:06,644
Jeff Olmstead: We can just make this how we want it, and then we can use APIs to do the data back and forth later on.

608
02:22:06,824 --> 02:22:24,864
Nathan Bedford: That's what we're hoping, too. I think you're seeing that, too. We believe once we get this built up, because we don't have the legacy baggage you just mentioned, we'll build good automated tests. We'll be able to build fast. We'll have really minimal regression. It should be a new experience for the admin team in block that's been kind of burnt by the history of this. We see it the same way.

609
02:22:24,924 --> 02:22:26,644
Jeff Olmstead: Yeah, no, I agree.

610
02:22:27,484 --> 02:22:30,084
Nathan Bedford: All right. Carlos. Carlos, yes, sir.

611
02:22:31,334 --> 02:23:02,656
Karlous Malcolm: You asked about FMVs. Yes. I just want to be clear, though. It's presumably just like for pinging on stuff, because for the MVP, everything's going to be being done manually. So it's not like, oh, we're going to have to do anything within Salesforce. Technically, it's just that. I just want to make sure I understood that. For MVP, again, there's no nothing from a Salesforce perspective. As far as we're concerned, like source number three doesn't even exist.

612
02:23:03,196 --> 02:23:34,956
Nathan Bedford: This – great question. That's – I've been asking that question for several weeks, meaning like that's the way I understand it, but I want to see what I've missed. I think there will still be some work around the synchronization, understanding – like we need to hammer that out so we can say with clarity yes or no. And that's what next week is going to be on our side is drawing out flows, saying, hey, Jeff, this is what we think. What's the impact on F&B? Like ideally, in my ideal world that may not be reality, is that, yeah, the Salesforce experience for internal users, for internal buyers and sellers stays the same.

613
02:23:34,996 --> 02:24:01,740
Nathan Bedford: We consume those event changes and we synchronize our external system. That is a way to do it that doesn't impact – that requires less Salesforce work, but we do like the idea of putting some of these internal processes into – like there's real advantages, like you mentioned, Jeff, about rebuilding it all new. We've got to find that balance of, well, is it real? Is it going to be one or the other or a hybrid in the middle so that we can say with clarity what – what the impact will be on the Salesforce side of things.

614
02:24:02,600 --> 02:24:34,350
Karlous Malcolm: Well, no, to me there's a difference between the impact on the Salesforce users and their experience. And if button pushers or engineers have to do any work in the back end, right, it might be transparent to them. Right. My understanding right now is, from the other discussions before and just while they mentioned it makes sense, or does it make sense, but I see that the pros of it is saying, hey, everyone's doing everything normally and you go manually into point O, which in my mind means, there is no development, no engineering, nothing from a Salesforce perspective.

615
02:24:34,970 --> 02:24:56,440
Karlous Malcolm: that's being impacted for TeamSystem 3.0. But I just want to make sure when I understood your question before, the reason behind your question about resource, you know, what our, we look like between now and February, is it just like if you ever have to ping us on stuff from a time perspective, or is it like, oh, hey, potentially if button pushers are engineering time. 

616
02:24:56,620 --> 02:25:14,112
Steve Muniak: it's very different. We're gonna work with Mark to request schedule. time it's more of this you know it's it's the answer is both but if we're going to get if we're going to be asking for four blocks of time mark is going to be our kind with both death and B and G Carlos but no worries but right now.

617
02:25:14,112 --> 02:25:22,292
Karlous Malcolm: though we presume there's not gonna be any engineering involved it may be time but again for knowledge transfer things that nature yeah but not for all right.

618
02:25:22,292 --> 02:25:27,472
Steve Muniak: it's a minute as we get close to it you guys are gonna know at a minimum we need.

619
02:25:27,472 --> 02:25:33,332
Jake Herwaldt: to be able to consume some data from sure yeah right now it's not which.

620
02:25:33,332 --> 02:26:04,304
Nathan Bedford: wouldn't be engineering work on their side but yes I think oh it's not but and, I think if this sounds unclear yeah Carlos that's the part that like is that one gray area in my head is exactly what will and won't be effort on like I need to see that better to have a direct answer what I hoped that it would be as minimal as possible, but we've talked, we've heard back and forth like there might we just need to know for sure like external experience.

621
02:26:04,304 --> 02:26:34,324
Nathan Bedford: is super smooth i think we could build it tomorrow without many questions internally are we going to try to do it in a way that is almost no impact on the on salesforce engineering versus is there a need to do some kind of connectors that i've even thought of like i don't like that it's a gray area in my brain but it is and i think we're going to build flow charts so we can say here's what we think is the right step forward and then you guys can weigh in and say nope this is where we're going to need some custom api work or not you know that makes sense jeff like i wish i had a.

622
02:26:34,324 --> 02:27:05,066
Jeff Olmstead: better idea no i think it's good because we we don't know i mean the question was asked to you also like uh how long can we go without reseeding yeah like oh it's been a month can you dump your new materials so we can import them or is the expectation going to be at day one that these things just flow back and forth yeah yes do your diagrams get block imaging to decide and then that will answer carl's question which is not only do we need you to ask questions, in it to make sure we're on the same page, but by the way, we also need these APIs put.

623
02:27:05,066 --> 02:27:07,626
Jeff Olmstead: up in Salesforce so we can go consuming data.

624
02:27:08,086 --> 02:27:21,186
Nathan Bedford: Yeah, and I think that we had not considered the hybrid approach you mentioned, Jeff, which is a good approach, where there could be this hybrid approach of manually entering data between two things. That was a good call out that I had not thought about. So I like having a third option there.

625
02:27:22,716 --> 02:27:27,456
Jeff Olmstead: The biggest advantage I see of it, you can squash bugs so fast.

626
02:27:27,756 --> 02:27:27,956
Nathan Bedford: Yeah.

627
02:27:27,956 --> 02:27:52,646
Jeff Olmstead: Because you're very fluid on an external server to be able to literally go in, crunch it down. Internal to Salesforce, and rightly so, because it drives the financials and everything else, there's quite a review process to go through. I'm not saying you're not doing proper unit tests, but there is less oversight needed on your box to be able to quickly respond.

628
02:27:53,046 --> 02:27:53,466
Nathan Bedford: Totally.

629
02:27:53,506 --> 02:27:54,546
Jeff Olmstead: That's the best way I can say it.

630
02:27:54,566 --> 02:28:00,820
Nathan Bedford: Oh, yeah. Greenfield versus Brownfield. You're right. As much as we can... Yeah. We definitely want to do that.

631
02:28:02,000 --> 02:28:07,980
Jeff Olmstead: So if we can get, you know what, this manual process has worked for a month. Let's bring on the next phase, which starts moving data around with API calls.

632
02:28:08,340 --> 02:28:16,040
Nathan Bedford: Yeah, I like that. All right, I think that's all that I had. Anything else, Steve, that you wanted to cover that was on your mind. 

633
02:28:16,820 --> 02:28:36,280
Steve Muniak: Just an update, Jeff. Sam Binder has agreed to stay on for phase one. Oh, fine. On a part-time basis, yeah, it's great. She was here for discovery the past two days with the business team. I mean, it's very, very limited, five hours a week at the most, but we have not lost that resource.

634
02:28:36,990 --> 02:28:45,540
Jeff Olmstead: Okay. And I hear Vicki's on her way coming into Michigan today. She's already on the way home. Oh, she's back the other way. Okay, perfect. She has been in Michigan.

635
02:28:45,680 --> 02:29:10,772
Steve Muniak: She came in Sunday. She's out today. And then Jordan is joining my team as the data analyst and support person. Awesome. And some of Vicki's work is going to transition. over to Jordan a little bit to me, and we anticipate a third person coming in for, as primary trainer and documentarian and all that stuff by end of year.

636
02:29:12,022 --> 02:29:14,422
Jeff Olmstead: Great. Yeah, that will really help boost the team.

637
02:29:14,682 --> 02:29:20,862
Steve Muniak: Yeah, with 3.0 coming out, we anticipate a lot of growth.

638
02:29:21,992 --> 02:29:22,352
Jeff Olmstead: Yes.

639
02:29:23,792 --> 02:29:24,152
Steve Muniak: Yep.

640
02:29:27,912 --> 02:29:35,302
Nathan Bedford: I think that's all we have. Yeah. Really appreciate the time, guys. This is going to be great. You guys obviously have a ton of depth of knowledge here that we'll be tapping into.

641
02:29:36,582 --> 02:29:41,622
Jeff Olmstead: Awesome. This has been great, as I said, as well. Looking forward to it. Appreciate it.

642
02:29:41,662 --> 02:29:43,482
Nathan Bedford: Looking forward to working together, man. Gentlemen, thank you.

643
02:29:44,492 --> 02:29:45,272
Jeff Olmstead: Thanks. Have a great day.

644
02:29:45,352 --> 02:29:50,842
Steve Muniak: You guys ever forget to log out of a meeting. 

645
02:29:51,282 --> 02:29:51,742
Nathan Bedford: Oh, yeah.

646
02:29:51,982 --> 02:29:54,982
Steve Muniak: And then you walk into your office, and you're still online.

647
02:29:55,222 --> 02:30:02,184
Nathan Bedford: Oh, people have done this with Zoom, and they've been in the bathroom, and that's like, this has happened. Where's the AI helping me there. 

648
02:30:02,384 --> 02:30:08,824
Steve Muniak: Let's take a quick 15 and regroup. Jordan, thank you. I know that you didn't have a lot of input here, but I wanted you to get this background.

649
02:30:08,924 --> 02:30:20,674
Jordan Clark: I took some good notes down here. I was just looking at that. I'm still seeing three cases on that 2.0 project that are either in-dev or testing right now. So maybe...

650
02:30:23,824 --> 02:30:54,514
Nathan Bedford: What tool are you guys using to track cases? I mean, we'll use our own probably, but I'm just curious what they're used to. Salesforce. I'm going to go talk to Andrew real quick. Jeff knows something I don't know. He's a good salesman. Yeah, that's... Have you ever used things like Jira or any of the other tools that... I'm not using Jira, but I'm just curious because it sounds like we're being treated like an external vendor in the sense that we can bring our own stuff.

651
02:30:54,654 --> 02:31:16,846
Nathan Bedford: So we're looking forward to bringing things that are best in class, hopefully. Things that we love to use. Yeah, the tools that we love to use, we love to use them because we want to build tools like them. There's a way to build stuff where it's preemptively loaded behind the scenes and you just press, you open it up and it's immediately there. And the one we use called Linear does that.

652
02:31:17,086 --> 02:31:17,446
Nathan Bedford: Okay.

653
02:31:17,786 --> 02:31:49,366
Nathan Bedford: And whereas, you know, clicking and waiting, like we're going to try to do that as much as we can in V3. There's so many things we can preload and when you've ever used a tool that does that, I mean it's kind of like Outlook when you've downloaded all the messages, it's fast to come up with the next message. We can do that with WebApps too. And I think that will be a differentiator. Like I'm really curious to see, kind of, you know, Jack's point about the power users. What things, like the power users I've seen, I'm thinking of like when you go to AutoZone and you see they're using their DOS based system. But they're like super fast with the keyboard.

654
02:31:49,706 --> 02:32:21,180
Nathan Bedford: If people know their flows, how can we help make those flows as fast as possible? Whether it's everything being intentionally keyboard driven, but then preemptively loading things. There's this thing called . optimistic updates you can do too, where you say, I just clicked save, and assume it's saved, so like move me on to the next thing. If for some reason it doesn't save, then pop an error message saying, oh, go back and finish this. But there's a difference between am I waiting for every action, or do we have it already there, or assume it worked, because it does work 100, you know, let's say 99,000 times out of one after that.

655
02:32:21,440 --> 02:32:41,160
Nathan Bedford: So that's, I like seeing what tools people are used to using so I can say, oh, we want to build something like that, whatever that is. Like what's your favorite piece of software, what's this piece of software that when you use, you like? I'm curious of you, like when you use software, whether it's, I don't know, Gmail, or you run the Microsoft stuff, anything that you're like, man, I just, it's clean, it's quick, it doesn't break very much.

656
02:32:41,360 --> 02:32:48,150
Jordan Clark: Yeah. My current professional life? Not so many. There's not, there's not a very long list. Yeah, well that's not. 

657
02:32:48,170 --> 02:33:15,872
Nathan Bedford: people are used to like B2B apps, business to business apps tend to be bad. B2C apps are good, it's like catch PT. People like, you know, it is fast. Instagram, Instagram is this cool thing where when you're, As you're editing the effect of your picture, it's uploading it in the background. So all those little touches that make things feel snappier. We want to pull inspiration from the B2C world, because there's no reason you can't do that. And then bring it into the B2C world. This is going to be fun.

658
02:33:16,092 --> 02:33:17,072
Jordan Clark: Yeah, that looks exciting.

659
02:33:19,202 --> 02:33:44,202
Nathan Bedford: Yes, it's really clear. I've worked with a Carlos-type person. Yeah, yeah, yeah. You're always thinking about that way of how things could break. Which is good, you need to know that. But I also know how to pitch my new ideas. I'm normally pulled in as the guy that brings innovation to enterprise. And normally, the Carloses are like, wait a minute. Let's wait, let's run it through the process. So I have to make sure I say the right words. Like, we've got to do this with this. Here's where it's covering those bases.

660
02:33:45,822 --> 02:34:04,104
Jordan Clark: Carlos is a lot of customer support types for Salesforce. Every time I talk to him, I get an earful of how much Carlos hates Salesforce. He hates Salesforce. Is that Matt's world, that he lives in a Salesforce? Well, he came from Siemens, right? Yeah, he came from Siemens. I don't know what his foundational stuff is.

661
02:34:04,284 --> 02:34:06,804
Jake Herwaldt: But that's all he's doing now, right? He's doing it, yeah, he's doing it.

662
02:34:07,284 --> 02:34:08,624
Nathan Bedford: But he just hates his life right now.

663
02:34:08,644 --> 02:34:09,684
Jake Herwaldt: Yeah, that sucks. This poor guy.

664
02:34:10,244 --> 02:34:25,384
Nathan Bedford: Okay. Yeah, Jeff hit the nail on the head at the end, which is, it really is a dream, for an engineering group like us to be able to build a new thing, they call them greenfield applications, without having tie-ins to our old stuff. Like, he's had to maintain this older thing with older products.

665
02:34:25,404 --> 02:34:51,674
Jake Herwaldt: And it's going to be hard. The hard part is probably inventing it throughout. Let's not go into what. Because I'm even thinking, hear me out, hear me out, possibly crazy. Is it that hard for MVP to automate the tiered trigger? It sounds like it's literally as simple as, wait 15 minutes, if I don't get two replies, pass it to the next.

666
02:34:52,404 --> 02:35:09,296
Nathan Bedford: Yeah, no, I think Jeff is right that the process goes super fast. I don't think it is that hard. So I'm like, if that's the case, then you can move all the avenues. The challenge is, me is everybody that's been a part of the non-technical side of this they're used to I want this feature and then they see how long it takes and how much it doesn't you don't know why it doesn't work and why it takes so long yeah but.

667
02:35:09,296 --> 02:35:18,716
Jake Herwaldt: if we bring them along in the sandbox world the whole process yes to the point where it come February they're like why am I starting by like I want to be maybe.

668
02:35:18,716 --> 02:35:48,586
Nathan Bedford: by November these admin users yeah that was that was I like this external slope and I had that now and I hope that drives some of those things like because yeah the auto sourcing is super from a tech perspective yeah it just doesn't sound like it's now I thought there was more magic behind so I really haven't anything that's magical like yeah it's useful absolutely sure but like we've had to do really really hard things technically this is small sets of data and it's just very basic but important like line of business work for.

669
02:35:48,586 --> 02:36:20,680
Jordan Clark: that stuff that's interesting cuz like really my my entry into data it's within flock has been out of the lack of, self, Like, when we launched Salesforce 360, my team in the return spaces, as you can imagine, like, we're kind of an 11th hour team. It's like you've got to sell and invoice and, you know, everything's already happened. And so there was so much effort and emphasis put into developing other teams that when we launched Salesforce 360, my team had very little at that point in time.

670
02:36:21,140 --> 02:36:51,570
Jordan Clark: And because we spent so much time trying to figure out, like, well, how are they going to transact and how are we going to invoice and how are we going to communicate between these departments and these entities and all of that? So we're, like, in the last four weeks of crunch time, and it's like, oh, well, returns exist, too. And so we started off with such a small after-award concept to how anything from an SOP perspective was going to pour over from our SAP life at Salesforce lightning.

671
02:36:53,190 --> 02:37:08,172
Jordan Clark: I just started digging into data. I don't know anything because nothing exists. So, nothing's prompting me to know what the next best thing to do is. So, I just started digging into raw data and building dashboards and building reports.

672
02:37:08,612 --> 02:37:09,032
Nathan Bedford: Is that Salesforce. 

673
02:37:09,352 --> 02:37:32,922
Jordan Clark: Yeah. Okay. And that's really where my growth just really ballooned. Sure. Forced you. Yeah. Necessity. Yeah. Really out of necessity. And so, prior to that, I almost had a curiosity for data. And I'm just like a type A kind of person. But no formal training unit. No. Okay. Yeah. Like nothing where it's just like, oh, hey, this is like what I'm called to do in life.

674
02:37:33,122 --> 02:37:33,242
Nathan Bedford: Yeah.

675
02:37:33,542 --> 02:37:42,762
Jordan Clark: But then pretty quickly, it was just like, well, out of the necessity of like I got to get something done here, I just started diving in deep, getting in the mud and figuring it out.

676
02:37:43,102 --> 02:37:45,202
Nathan Bedford: Do you have good tools? Does Salesforce give you pretty good tools for this. 

677
02:37:45,362 --> 02:38:20,734
Jordan Clark: It's fairly decent. Okay. Yeah. See, the biggest issue, and you're obviously seeing it here, is just the amount of manual, entry and workaround. Yeah. And I would say our team still lives in that space today. Okay. There's so many things that could be so much more efficient in an automated process. Yeah. The ridiculous things I have to ask the system to do and look for and extract this data and I only want to see this and I'm manually entering some of these pieces where it's like, hey, if I want this to remove from this report, I'm actually having to add characters in this field over here just so I can negate it when I really should have some type of logo in here.

678
02:38:20,734 --> 02:38:38,584
Jordan Clark: And it's just, you know, so I would say, like, there's a lot of foundational pieces there. And the issue, of course, has been in time development. Yep. Where, like, I think, you know, talking with Jeff and others, it's like, I'm really going to focus on some returns processes. February was our goal date of this year.

679
02:38:39,484 --> 02:39:12,516
Nathan Bedford: Yeah, I worked at Bosch and like the database department for a while. And so we had a chance to see like, what was specifically the financials. And so we got to see across trillions of records of data, like, you know, how they would, it was really controllers looking for, you would probably love this, controllers would say, hey, why are expenses higher than... last month and they would dig into it and they would be able to drill down and see it's like exploring i don't know why but let's drill into it and the tools they had they could do it like, i remember one of the fun things is they drilled into an expense at a plant and it was like.

680
02:39:12,516 --> 02:39:44,776
Nathan Bedford: somebody had accidentally squirreled a metal batch and that that kind of thing just bubbled up to a higher higher expense yeah and so they were kind of detectives for that but that's i was more on the i wrote a lot of sql and um not having access to sql would make it harder for me to do data because once you know how to like slice the dice without having to add those extra columns, that's what i'm curious it's eventually getting access to more robust tools probably you would love that because um this is like i think the salesforce tooling is great for a certain level.

681
02:39:45,316 --> 02:39:48,896
Nathan Bedford: but then if you can export that to a data warehouse and then you then then the sky is.

682
02:39:48,896 --> 02:40:19,790
Jake Herwaldt: the limit well the the months i joined i was a buyer for years when i first started and the month i joined was like the last three months of them converting to, and so they had the same issues like it was just like literally it was like oh how do we do returns how do we do all these things and they didn't and so then instantly we had to create basically reporting like that's where then I, that's that was my brother he was like no one knew how to report and no one.

683
02:40:19,790 --> 02:40:28,770
Jake Herwaldt: knew no no one everyone lost historical data so then you're like creating data, and then trying to find just like your guess like yeah I built an internal.

684
02:40:28,770 --> 02:40:59,610
Nathan Bedford: tool at boxes so much fun we're like the controllers would say I want to know what this number is going on what's going on this number so a little tool that we could take that wrap that sequel query into a website so they could say I want to run that report download the excel file and they can have me like custom reports that this is the safe the flow of them saying to a business analyst hey can you have a tension on support we're going to a ticketing queue engineer run the report yeah back to the BA back to the end yeah and now it could be a button once you so that's where I'm thinking like as you dig in out it'd be interesting to to connect simple.

685
02:41:00,032 --> 02:41:17,082
Nathan Bedford: Hey, here's some tools. We think could really help you. Yeah, because it's a common problem across the industry, And there's so many solutions that can help but you have to just get a handle on your data first like you do right now All right, that was good. See you good. It's really good. You need me for this next part at all Steve or nope.

686
02:41:17,082 --> 02:41:21,542
Jordan Clark: Okay, go make Eric happy. I'll go go live my other life.

687
02:41:23,872 --> 02:41:33,752
Jake Herwaldt: See you said that someone's name at one point you said I'm looking for ways to Make this product make money or offset the cost. Oh, yeah.

688
02:41:33,752 --> 02:41:45,402
Steve Muniak: Mitch is the COO and is running service right now. He's my old boss from all that She came over the year to one sometimes. So you're saying cutting down the cost of me only having to do.

689
02:41:45,402 --> 02:42:02,214
Jake Herwaldt: Yeah, I genuinely right now it feels like we have it feels like we have two or three versions what MVP one, could look like, or like YMVP could look like.

690
02:42:02,214 --> 02:42:02,894
Nathan Bedford: The menu is, yeah.

691
02:42:03,094 --> 02:42:18,424
Jake Herwaldt: Yeah, and so I really, I don't know how we fully want to, but I wanted to find what are our options and then pitching what level of it. Yeah. Because there's this express version of me that's like we could, bare bones, we could do before February.

692
02:42:21,004 --> 02:42:25,664
Nathan Bedford: It's not aggressive, you're right. But you're not supposed to say it to everybody, you know. 

693
02:42:26,084 --> 02:42:35,754
Jake Herwaldt: But I'm saying you strip out enough out of the menu, you could deliver earlier. Or we could wait until February if that's the goal, and then fit more into the bucket.

694
02:42:37,394 --> 02:42:53,394
Steve Muniak: When I walked out of here yesterday, I thought to myself, we could probably have MVP November 1st, November. And then the question is, do you want to launch right before Thanksgiving? There's that. The other issue is, will Siemens keep up with us. 

695
02:42:53,454 --> 02:42:53,814
Nathan Bedford: Yeah.

696
02:42:53,854 --> 02:43:15,516
Steve Muniak: We have to go through the Siemens validation process, and that is going to be the long-term decision. And I want to ask you what that looks like. It's FMV. And the other part of it is, we'll have buckets for three and four, I think it's two and three, but at that point we're going to be doing releases every two weeks.

697
02:43:15,616 --> 02:43:15,836
Nathan Bedford: Right.

698
02:43:15,956 --> 02:43:16,756
Steve Muniak: Oh, absolutely.

699
02:43:16,756 --> 02:43:18,676
Nathan Bedford: Yes, exactly. There's no need to wait that long.

700
02:43:20,756 --> 02:43:32,316
Jake Herwaldt: And from a Siemens standpoint, do they, is that pretty straightforward, like releases, they don't, they're not, I think it's, I think we're registering at this point and after.

701
02:43:32,316 --> 02:43:33,316
Steve Muniak: that. Yeah.

702
02:43:34,476 --> 02:43:41,496
Nathan Bedford: I have once a year. Yeah. Mark sent me some documents that I had to sign that we'll all train up on what to release with the review process. Oh, cool.

703
02:43:41,496 --> 02:43:55,816
Jordan Clark: Thanks guys. Appreciate it. Thank you. Yes. Thanks for having me. Excited for all the stuff. Can we get the chance to make, I don't know.

704
02:43:56,856 --> 02:44:21,660
Nathan Bedford: Yeah, yeah, yeah. Can we get to that part of the phase? Same thing, I remember. Yeah. Yeah, I think especially if we didn't have to, if it was all very minimal impact with Salesforce. Yeah, the external flow we just saw, and Jeff validated that. Having him validate that the process was as simple as it thought it was was really big for me. Because we're like, what are we missing. 

705
02:44:21,800 --> 02:44:35,960
Jake Herwaldt: Yeah, yeah, Steve, what are your thoughts on that? When we came here for the RFP, I remember several people feeling worried we were under, oh, you weren't in that camp, though, that we were thinking this was simpler than it was. Well, I think you were sitting with the admin.

706
02:44:36,100 --> 02:44:36,760
Steve Muniak: That's what they were saying.

707
02:44:36,880 --> 02:44:37,120
Jake Herwaldt: Yeah.

708
02:44:37,620 --> 02:44:50,170
Steve Muniak: I was always the contention that replacing 2.0, moving that to 2.0 was really straightforward. Yeah.

709
02:44:50,870 --> 02:44:59,990
Jake Herwaldt: What's your opinion now of admin, like the internal block person? Say again. What's your opinion now of the complexity of it. 

710
02:45:00,032 --> 02:45:08,332
Steve Muniak: the internal block. More complex, less complex? It's equally complex, equally as I had thought.

711
02:45:08,592 --> 02:45:16,742
Nathan Bedford: Yeah. Yeah. But that one we might be able to skip for that first version. Yeah. It makes it all easier.

712
02:45:19,122 --> 02:45:30,522
Steve Muniak: You know, I was just, I was just going to get these bombed up to the home part and let, uh... I put, I'd taken this out and tried to get it back to how it is. Yeah, I had just a fun job too. I was just going to go back to the IT guy and say, I screwed up your setup. Yes. Here. 

713
02:45:30,582 --> 02:45:59,362
Nathan Bedford: come and fix it. I'm having been the IT guy that's fixing it, I'm trying to... Unless that's the last cable that's hanging off. What's she doing? Yeah, I think... Pretty boy. It's a good point that, like, the overhead from the cement looks like... I feel like I understand what they're... I feel like it's... We, um... Obviously there's a big... No, but I didn't mean...

714
02:46:17,614 --> 02:46:26,354
Steve Muniak: I need to jump on a bunch of stuff, so let's do lunch on our own, just take them to Westside, Westfield, whatever it is.

715
02:46:27,544 --> 02:46:28,264
Andrew Bailey: West Lansing. 

716
02:46:28,444 --> 02:46:33,454
Steve Muniak: No. You've got to experience it.

717
02:46:35,614 --> 02:46:42,104
Jake Herwaldt: The roller skating rink? I keep seeing that every time I drive in. I'm like, when are we going there. 

718
02:46:42,164 --> 02:46:43,304
Nathan Bedford: If we change it once, it means something.

719
02:46:46,404 --> 02:46:51,124
Steve Muniak: We've never been, it's right five minutes away in Mesa. It's a sub shop.

720
02:46:51,504 --> 02:46:53,724
Nathan Bedford: Oh, nice. Sub's not good. We haven't had subs.

721
02:46:54,044 --> 02:46:56,634
Jake Herwaldt: Yeah, I love subs. Well, let's do it. Is that honey. 

722
02:46:56,934 --> 02:47:04,926
Nathan Bedford: Yeah. I don't usually go to Mesa, but I love that. I'm taking this mess. What is that? It's next to the coffee. They have the honey and strips. I'm like, that's a snack right there.

723
02:47:05,026 --> 02:47:21,146
Andrew Bailey: That's a power snack. See, Nate, you are an ultra-runner deep down inside. That is totally something. Thanks. Are you expecting us to come back here because you want to do something in the afternoon? Are you expecting us to leave? We have a home-based office in my basement.

724
02:47:22,026 --> 02:47:34,456
Steve Muniak: I'm leaving that up to you guys. If you have questions, you want to bring people in, I'm out of here at 3.30, but if you want to work out of here and just have access to people, you guys want to go home, it's all up to you.

725
02:47:35,336 --> 02:47:39,196
Andrew Bailey: I was planning that we would clean this up here.

726
02:47:40,036 --> 02:47:41,916
Jake Herwaldt: Let's come back after lunch on that, minimum.

727
02:47:42,516 --> 02:47:54,846
Andrew Bailey: Either way, if we go to Mason and come back here, this is on the way. All right, I think that's good. I just need to finish my thought on this diagram, and then we can go.

728
02:47:55,666 --> 02:47:59,946
Jake Herwaldt: Steve, what's your opinion of this week? I don't think we're done yet. I still want to talk to you.

729
02:48:01,720 --> 02:48:13,610
Steve Muniak: Yeah, let's regroup at 1. I'm going to make a phone call. I've got advice for Andrea. Then we'll do a wrap-up. Sounds great. We'll message you our UTA.

730
02:48:13,830 --> 02:48:16,730
Nathan Bedford: Let me turn off my AI. I thought it was a great kickoff.

